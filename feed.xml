<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2025-05-13T09:52:30+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Jandex 3.3.1</title><link href="https://www.smallrye.io/blog/jandex-3-3-1/" rel="alternate" type="text/html" title="Jandex 3.3.1" /><published>2025-05-13T09:00:00+00:00</published><updated>2025-05-13T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-3-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-3-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.3.1&quot;&gt;release&lt;/a&gt; of Jandex 3.3.1.
This release contains a few small improvements and bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo.isAbstract()&lt;/code&gt; method was added.
It is a simple shortcut for &lt;code&gt;Modifier.isAbstract(method.flags())&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;PrimitiveType.isBox()&lt;/code&gt; method was added.
It returns whether the given &lt;code&gt;Type&lt;/code&gt; is a class that is a wrapper type of a primitive type (or, in other words, possible result of a boxing conversion).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.simpleName()&lt;/code&gt; method was fixed in case of top-level classes with dollar &lt;code&gt;$&lt;/code&gt; in their names.
Thanks Martin Kouba for the bug report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The module descriptor (&lt;code&gt;module-info.class&lt;/code&gt;) was added.
Since Jandex is still a Java 8 project, the &lt;code&gt;module-info.java&lt;/code&gt; class is not compiled by &lt;code&gt;javac&lt;/code&gt;; instead, it is present outside of &lt;code&gt;src/main/java&lt;/code&gt; and is turned into the &lt;code&gt;.class&lt;/code&gt; file by Moditect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Missing deprecation notices (missing &lt;code&gt;@deprecated&lt;/code&gt; javadoc tags for &lt;code&gt;@Deprecated&lt;/code&gt; methods) were added.
Thanks Martin Panzer for the bug report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.9.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-9-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.9.1" /><published>2025-04-23T07:00:00+00:00</published><updated>2025-04-23T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-9-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-9-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.9.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.9.1.
This release contains an important bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After the &lt;a href=&quot;/blog/fault-tolerance-6-7-0&quot;&gt;big async rewrite&lt;/a&gt;, the retry strategy used recursion to implement a loop even in the synchronous case.
That is wrong, because it may easily lead to a stack overflow error in case of a high number of retry attempts.
This bug is now fixed.
The internal &lt;code&gt;Future&lt;/code&gt; type has gained a dedicated &lt;code&gt;loop()&lt;/code&gt; method to implement &lt;code&gt;while&lt;/code&gt; loops.
The implementation is structured so that recursion is used for asynchronous iterations, while classic loop is used for synchronous iterations.
In other words, it is a &quot;just enough&quot; implementation of trampolines.
Thanks Maxuel Macavilca Montjoy for the issue report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, with this release, the portable extension in SmallRye Fault Tolerance ignores synthetic methods.
This means they are not intercepted anymore by the fault tolerance interceptor.
The Quarkus extension for SmallRye Fault Tolerance has already been ignoring synthetic methods for a long time; now all the other CDI Full based implementations work similarly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.3.0</title><link href="https://www.smallrye.io/blog/jandex-3-3-0/" rel="alternate" type="text/html" title="Jandex 3.3.0" /><published>2025-04-07T12:00:00+00:00</published><updated>2025-04-07T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-3-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-3-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.3.0&quot;&gt;release&lt;/a&gt; of Jandex 3.3.0.
This release contains two improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.enclosingClassAlways()&lt;/code&gt; method was added.
Contrary to &lt;code&gt;enclosingClass()&lt;/code&gt;, which only returns the enclosing class for member classes, this method returns the enclosing class in case of all classes: member, local and anonymous, regardless of their declaration site.
Notably, in case of local and anonymous classes, they can also occur in static initializers, instance initializers and field initializers.
In this case, it wasn&amp;#8217;t possible to determine the enclosing class before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;IndexView.getKnownDirectImplementations()&lt;/code&gt; and &lt;code&gt;getAllKnownImplementations()&lt;/code&gt; methods were added.
The &lt;code&gt;getKnownDirectImplementations()&lt;/code&gt; differs from the existing &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; method in that it &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; return direct subinterfaces, which is most likely what users expect.
The &lt;code&gt;getAllKnownImplementations()&lt;/code&gt; is not different to &lt;code&gt;getAllKnownImplementors()&lt;/code&gt; at all, it exists just for symmetry.
Also, the &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; and &lt;code&gt;getAllKnownImplementors()&lt;/code&gt; methods are now deprecated.
Use the &lt;code&gt;get*Implementations()&lt;/code&gt; methods instead; pay attention to the difference mentioned above, but it shouldn&amp;#8217;t affect most of the code out there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; This Jandex release increments the persistent format version.
This means that indices generated by Jandex 3.3.0 are &lt;em&gt;not&lt;/em&gt; readable by previous Jandex versions.
Since the only change in the persistent index is the addition of enclosing class information for the initializer case, it is recommended to stay on the previous format version for most users for a while.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.9.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-9-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.9.0" /><published>2025-03-11T07:00:00+00:00</published><updated>2025-03-11T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-9-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-9-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.9.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.9.0.
This release contains an important bugfix.
Upgrade is strongly recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with &lt;a href=&quot;/blog/fault-tolerance-6-3-0&quot;&gt;the 6.3.0 release&lt;/a&gt;, SmallRye Fault Tolerance emits metrics even when using the programmatic API.
If there is no description set on the &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object, a UUID was used as the value of the &lt;code&gt;method&lt;/code&gt; tag.
However, at least in some metrics implementations, the keys and values of all tags are retained in memory.
If a &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object is created for each action (which is relatively easy to achieve without even knowing), a fresh UUID is generated for each object.
Since those UUIDs are stored in memory indefinitely, this basically amounts to a memory leak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, this memory leak is fixed.
If there is no description set on the &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object, metrics are simply not emitted.
This is technically speaking a breaking change, but we feel it is very much warranted.
Noone likes memory leaks and OOMs happening in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bug is also fixed in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.4.2&quot;&gt;6.4.2 release&lt;/a&gt;, which doesn&amp;#8217;t have an announcement.
More backports might be coming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.7</title><link href="https://www.smallrye.io/blog/jandex-3-2-7/" rel="alternate" type="text/html" title="Jandex 3.2.7" /><published>2025-02-17T08:00:00+00:00</published><updated>2025-02-17T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-7</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-7/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.7&quot;&gt;release&lt;/a&gt; of Jandex 3.2.7.
This release contains one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An annotation overlay configured to include inherited annotations didn&amp;#8217;t necessarily work correctly when asked for annotations on the &lt;code&gt;Object&lt;/code&gt; class, depending on the underlying &lt;code&gt;IndexView&lt;/code&gt; implementation.
That was fixed in this release: when the passed class does not have a superclass (which means it is &lt;code&gt;Object&lt;/code&gt;), the index is not queried at all.
Thanks Matěj Novotný for the issue and pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.6</title><link href="https://www.smallrye.io/blog/jandex-3-2-6/" rel="alternate" type="text/html" title="Jandex 3.2.6" /><published>2025-02-11T14:00:00+00:00</published><updated>2025-02-11T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-6</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.6&quot;&gt;release&lt;/a&gt; of Jandex 3.2.6.
This release contains one improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Performance of the immutable annotation overlay (&lt;code&gt;AnnotationOverlay&lt;/code&gt;) was significantly improved, especially in the most common case of no annotation transformation.
That improvement consists of caching the result of annotation transformations for all declarations, even for those where no transformation applied.
This was originall omitted, but it turns out that the memory overhead is very small, because most objects already exist.
There are other small improvements too, including significant shrinking of allocation rate.
Thanks Martin Panzer for the original pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.5</title><link href="https://www.smallrye.io/blog/jandex-3-2-5/" rel="alternate" type="text/html" title="Jandex 3.2.5" /><published>2025-02-07T07:00:00+00:00</published><updated>2025-02-07T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-5</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-5/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.5&quot;&gt;release&lt;/a&gt; of Jandex 3.2.5.
This release contains two bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.canonicalRecordConstructor()&lt;/code&gt; method had two issues.
If the record only had 1 component, it didn&amp;#8217;t work at all.
It also didn&amp;#8217;t work properly when &lt;code&gt;javac&lt;/code&gt; emitted type annotations on the record components differently from the canonical constructor parameters.
That in theory shouldn&amp;#8217;t happen, but in practice, there are cases like that.
Both of these issues are fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, certain type annotations were sometimes forgotten.
This happened when one target (such as a &lt;code&gt;MethodInfo&lt;/code&gt;) had both class-retained and runtime-retained type annotations.
In this case, only one kind would survive; type annotations of the other kind would be lost.
This bug is fixed now and all type annotations are now present in the index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.8.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-8-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.8.0" /><published>2025-02-04T07:00:00+00:00</published><updated>2025-02-04T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-8-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-8-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.8.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.8.0.
This release contains one new feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-6-7-0&quot;&gt;SmallRye Fault Tolerance 6.7.0&lt;/a&gt;, we introduced a new programmatic API, together with an annotation to use the programmatically created &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; objects declaratively: &lt;code&gt;@ApplyGuard&lt;/code&gt;.
In this release, we add support for configuration for &lt;code&gt;@ApplyGuard&lt;/code&gt; using MicroProfile Config.
Note that &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt; themselves still do not support configuration, only &lt;code&gt;@ApplyGuard&lt;/code&gt; does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that if you want to configure the &lt;code&gt;Guard&lt;/code&gt;/&lt;code&gt;TypedGuard&lt;/code&gt; used declaratively via &lt;code&gt;@ApplyGuard&lt;/code&gt;, you should &lt;strong&gt;NEVER&lt;/strong&gt; use those objects programmatically.
Configuration is applied on creation, which happens lazily, on the first use.
This first use must be through &lt;code&gt;@ApplyGuard&lt;/code&gt;, otherwise configuration would be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuration keys are still the same, except you use the &lt;code&gt;@Identifier&lt;/code&gt; value instead of a &lt;code&gt;&amp;lt;classname&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s assume the following &lt;code&gt;Guard&lt;/code&gt; declaration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class PreconfiguredFaultTolerance {
    @Produces
    @Identifier(&quot;my-fault-tolerance&quot;)
    public static final Guard GUARD = Guard.create()
            .withRetry().maxRetries(2).done()
            .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, to configure the maximum number of retries, one can use the following configuration keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SmallRye Fault Tolerance specific: &lt;code&gt;smallrye.faulttolerance.&quot;my-fault-tolerance&quot;.retry.max-retries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;specification defined: &lt;code&gt;my-fault-tolerance/Retry/maxRetries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Global configuration also applies to &lt;code&gt;@ApplyGuard&lt;/code&gt;. In this case, the keys are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SmallRye Fault Tolerance specific: &lt;code&gt;smallrye.faulttolerance.global.retry.max-retries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;specification defined: &lt;code&gt;Retry/maxRetries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enablement configuration also applies. Note however that if the &lt;code&gt;Guard&lt;/code&gt; or &lt;code&gt;TypedGuard&lt;/code&gt; is created &lt;em&gt;without&lt;/em&gt; certain fault tolerance strategy, no amount of configuration can add it.
Configuration only applies to strategies that were added in the builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.4</title><link href="https://www.smallrye.io/blog/jandex-3-2-4/" rel="alternate" type="text/html" title="Jandex 3.2.4" /><published>2025-02-03T07:00:00+00:00</published><updated>2025-02-03T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-4</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.4&quot;&gt;release&lt;/a&gt; of Jandex 3.2.4.
This release contains one small improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;JandexReflection.loadType()&lt;/code&gt; method was added.
This method accepts a Jandex &lt;code&gt;Type&lt;/code&gt; and returns a corresponding Reflection &lt;code&gt;Type&lt;/code&gt;.
The result is equal to the reflectively obtained &lt;code&gt;Type&lt;/code&gt; and has the same hash code, as long as there are no type variables.
The JDK implementation of &lt;code&gt;TypeVariable.equals()&lt;/code&gt; checks for a specific implementation class, so proper equality is impossible to achieve in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.7.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-3/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.3" /><published>2025-01-09T16:00:00+00:00</published><updated>2025-01-09T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.3&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.3.
This release contains one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/blog/fault-tolerance-6-7-2&quot;&gt;previous release&lt;/a&gt;, the event loop integration was significantly improved.
That improvement, alas, contains a bug in the Vert.x integration.
We assumed that a Vert.x thread is always associated with a current Vert.x context, but that doesn&amp;#8217;t have to be the case.
Especially in case of a worker thread pool, which can be (in Quarkus, for example) used as a classic thread pool as well and tasks can be submitted to it outside of a Vert.x context.
This wrong assumption lead to a NPE, which is fixed now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>