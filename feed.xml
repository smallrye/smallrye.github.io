<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2025-03-11T10:45:51+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 6.9.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-9-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.9.0" /><published>2025-03-11T07:00:00+00:00</published><updated>2025-03-11T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-9-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-9-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.9.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.9.0.
This release contains an important bugfix.
Upgrade is strongly recommended.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting with &lt;a href=&quot;/blog/fault-tolerance-6-3-0&quot;&gt;the 6.3.0 release&lt;/a&gt;, SmallRye Fault Tolerance emits metrics even when using the programmatic API.
If there is no description set on the &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object, a UUID was used as the value of the &lt;code&gt;method&lt;/code&gt; tag.
However, at least in some metrics implementations, the keys and values of all tags are retained in memory.
If a &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object is created for each action (which is relatively easy to achieve without even knowing), a fresh UUID is generated for each object.
Since those UUIDs are stored in memory indefinitely, this basically amounts to a memory leak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, this memory leak is fixed.
If there is no description set on the &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; / &lt;code&gt;FaultTolerance&lt;/code&gt; object, metrics are simply not emitted.
This is technically speaking a breaking change, but we feel it is very much warranted.
Noone likes memory leaks and OOMs happening in production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The bug is also fixed in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.4.2&quot;&gt;6.4.2 release&lt;/a&gt;, which doesn&amp;#8217;t have an announcement.
More backports might be coming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.7</title><link href="https://www.smallrye.io/blog/jandex-3-2-7/" rel="alternate" type="text/html" title="Jandex 3.2.7" /><published>2025-02-17T08:00:00+00:00</published><updated>2025-02-17T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-7</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-7/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.7&quot;&gt;release&lt;/a&gt; of Jandex 3.2.7.
This release contains one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An annotation overlay configured to include inherited annotations didn&amp;#8217;t necessarily work correctly when asked for annotations on the &lt;code&gt;Object&lt;/code&gt; class, depending on the underlying &lt;code&gt;IndexView&lt;/code&gt; implementation.
That was fixed in this release: when the passed class does not have a superclass (which means it is &lt;code&gt;Object&lt;/code&gt;), the index is not queried at all.
Thanks Matěj Novotný for the issue and pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.6</title><link href="https://www.smallrye.io/blog/jandex-3-2-6/" rel="alternate" type="text/html" title="Jandex 3.2.6" /><published>2025-02-11T14:00:00+00:00</published><updated>2025-02-11T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-6</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.6&quot;&gt;release&lt;/a&gt; of Jandex 3.2.6.
This release contains one improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Performance of the immutable annotation overlay (&lt;code&gt;AnnotationOverlay&lt;/code&gt;) was significantly improved, especially in the most common case of no annotation transformation.
That improvement consists of caching the result of annotation transformations for all declarations, even for those where no transformation applied.
This was originall omitted, but it turns out that the memory overhead is very small, because most objects already exist.
There are other small improvements too, including significant shrinking of allocation rate.
Thanks Martin Panzer for the original pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.5</title><link href="https://www.smallrye.io/blog/jandex-3-2-5/" rel="alternate" type="text/html" title="Jandex 3.2.5" /><published>2025-02-07T07:00:00+00:00</published><updated>2025-02-07T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-5</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-5/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.5&quot;&gt;release&lt;/a&gt; of Jandex 3.2.5.
This release contains two bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.canonicalRecordConstructor()&lt;/code&gt; method had two issues.
If the record only had 1 component, it didn&amp;#8217;t work at all.
It also didn&amp;#8217;t work properly when &lt;code&gt;javac&lt;/code&gt; emitted type annotations on the record components differently from the canonical constructor parameters.
That in theory shouldn&amp;#8217;t happen, but in practice, there are cases like that.
Both of these issues are fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, certain type annotations were sometimes forgotten.
This happened when one target (such as a &lt;code&gt;MethodInfo&lt;/code&gt;) had both class-retained and runtime-retained type annotations.
In this case, only one kind would survive; type annotations of the other kind would be lost.
This bug is fixed now and all type annotations are now present in the index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.8.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-8-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.8.0" /><published>2025-02-04T07:00:00+00:00</published><updated>2025-02-04T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-8-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-8-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.8.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.8.0.
This release contains one new feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-6-7-0&quot;&gt;SmallRye Fault Tolerance 6.7.0&lt;/a&gt;, we introduced a new programmatic API, together with an annotation to use the programmatically created &lt;code&gt;Guard&lt;/code&gt; / &lt;code&gt;TypedGuard&lt;/code&gt; objects declaratively: &lt;code&gt;@ApplyGuard&lt;/code&gt;.
In this release, we add support for configuration for &lt;code&gt;@ApplyGuard&lt;/code&gt; using MicroProfile Config.
Note that &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt; themselves still do not support configuration, only &lt;code&gt;@ApplyGuard&lt;/code&gt; does.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that if you want to configure the &lt;code&gt;Guard&lt;/code&gt;/&lt;code&gt;TypedGuard&lt;/code&gt; used declaratively via &lt;code&gt;@ApplyGuard&lt;/code&gt;, you should &lt;strong&gt;NEVER&lt;/strong&gt; use those objects programmatically.
Configuration is applied on creation, which happens lazily, on the first use.
This first use must be through &lt;code&gt;@ApplyGuard&lt;/code&gt;, otherwise configuration would be ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configuration keys are still the same, except you use the &lt;code&gt;@Identifier&lt;/code&gt; value instead of a &lt;code&gt;&amp;lt;classname&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, let&amp;#8217;s assume the following &lt;code&gt;Guard&lt;/code&gt; declaration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class PreconfiguredFaultTolerance {
    @Produces
    @Identifier(&quot;my-fault-tolerance&quot;)
    public static final Guard GUARD = Guard.create()
            .withRetry().maxRetries(2).done()
            .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then, to configure the maximum number of retries, one can use the following configuration keys:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SmallRye Fault Tolerance specific: &lt;code&gt;smallrye.faulttolerance.&quot;my-fault-tolerance&quot;.retry.max-retries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;specification defined: &lt;code&gt;my-fault-tolerance/Retry/maxRetries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Global configuration also applies to &lt;code&gt;@ApplyGuard&lt;/code&gt;. In this case, the keys are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SmallRye Fault Tolerance specific: &lt;code&gt;smallrye.faulttolerance.global.retry.max-retries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;specification defined: &lt;code&gt;Retry/maxRetries&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enablement configuration also applies. Note however that if the &lt;code&gt;Guard&lt;/code&gt; or &lt;code&gt;TypedGuard&lt;/code&gt; is created &lt;em&gt;without&lt;/em&gt; certain fault tolerance strategy, no amount of configuration can add it.
Configuration only applies to strategies that were added in the builder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.4</title><link href="https://www.smallrye.io/blog/jandex-3-2-4/" rel="alternate" type="text/html" title="Jandex 3.2.4" /><published>2025-02-03T07:00:00+00:00</published><updated>2025-02-03T07:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-4</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.4&quot;&gt;release&lt;/a&gt; of Jandex 3.2.4.
This release contains one small improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;JandexReflection.loadType()&lt;/code&gt; method was added.
This method accepts a Jandex &lt;code&gt;Type&lt;/code&gt; and returns a corresponding Reflection &lt;code&gt;Type&lt;/code&gt;.
The result is equal to the reflectively obtained &lt;code&gt;Type&lt;/code&gt; and has the same hash code, as long as there are no type variables.
The JDK implementation of &lt;code&gt;TypeVariable.equals()&lt;/code&gt; checks for a specific implementation class, so proper equality is impossible to achieve in this case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.7.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-3/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.3" /><published>2025-01-09T16:00:00+00:00</published><updated>2025-01-09T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.3&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.3.
This release contains one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;a href=&quot;/blog/fault-tolerance-6-7-2&quot;&gt;previous release&lt;/a&gt;, the event loop integration was significantly improved.
That improvement, alas, contains a bug in the Vert.x integration.
We assumed that a Vert.x thread is always associated with a current Vert.x context, but that doesn&amp;#8217;t have to be the case.
Especially in case of a worker thread pool, which can be (in Quarkus, for example) used as a classic thread pool as well and tasks can be submitted to it outside of a Vert.x context.
This wrong assumption lead to a NPE, which is fixed now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.7.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-2/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.2" /><published>2025-01-06T11:00:00+00:00</published><updated>2025-01-06T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.2&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.2.
This release contains one bugfix and one improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The event loop integration was significantly improved.
In case the original invocation happened on an event loop thread, it is now guaranteed that the asynchronous completion also happens on the same event loop, even if the method completed on a different thread.
Timeouts are now also signalled on the event loop.
In case of the Vert.x integration in SmallRye Fault Tolerance (and therefore Quarkus), Vert.x worker threads are now also treated as event loops (although the guarantee of &quot;the same event loop&quot; is not as strict).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The capacity of a bulkhead is a sum of the bulkhead limit and the bulkhead queue size.
That sum could overflow, which wasn&amp;#8217;t detected before.
In this release, an overflow is a validation error which fails the deployment (in case of the &lt;code&gt;@Bulkhead&lt;/code&gt; annotation; when using the programmatic API, the &lt;code&gt;BulkheadBuilder.done()&lt;/code&gt; method will throw an exception).
Thanks Sayra Gmelig Meyling for the issue report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.7.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.1" /><published>2024-12-10T14:00:00+00:00</published><updated>2024-12-10T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.1.
This release contains one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new programmatic API (&lt;code&gt;Guard&lt;/code&gt;, &lt;code&gt;TypedGuard&lt;/code&gt;) &lt;a href=&quot;/blog/fault-tolerance-6-7-0/&quot;&gt;introduced&lt;/a&gt; in SmallRye Fault Tolerance 6.7.0 allows guarding multiple kinds of actions, both synchronous and asynchronous.
To do that, all implementations of fault tolerance strategies were unified.
This unification introduced a bug in the implementation of synchronous bulkhead, where acquiring the capacity semaphore was skipped before acquiring the work semaphore.
This bug would only appear when the same bulkhead is used to guard both synchronous and asynchronous actions, which wasn&amp;#8217;t possible until recently, but it&amp;#8217;s still a significant issue.
This release fixes it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the documentation index page was updated to show a programmatic API example using &lt;code&gt;TypedGuard&lt;/code&gt;, instead of the obsolete &lt;code&gt;FaultTolerance&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.7.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.0" /><published>2024-11-28T13:00:00+00:00</published><updated>2024-11-28T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.0.
This release contains several big improvements and refactorings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;big_internal_refactoring&quot;&gt;Big Internal Refactoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal implementations of all fault tolerance strategies up until now had 2 copies: one synchronous and one asynchronous (based on &lt;code&gt;CompletionStage&lt;/code&gt;).
This changes now: all strategies are unified on an asynchronous implementation (based on an internal async type), with a few adjustments for sychronous invocations to support thread interrupts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been done especially for the next feature, which is&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new_programmatic_api&quot;&gt;New Programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first version of the programmatic API (&lt;code&gt;FaultTolerance&lt;/code&gt;, &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;) was deprecated and scheduled for removal in SmallRye Fault Tolerance 7.0.
The second version (&lt;code&gt;Guard&lt;/code&gt;, &lt;code&gt;TypedGuard&lt;/code&gt;, &lt;code&gt;@ApplyGuard&lt;/code&gt;) is fairly similar, but has some important differences too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparison of &lt;code&gt;FaultTolerance&lt;/code&gt;, &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;TypedGuard&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;Guard&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;typed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;typed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;not typed&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does &lt;em&gt;not&lt;/em&gt; allow fallback&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows casting, but only if there is no fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does &lt;em&gt;not&lt;/em&gt; allow casting&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no casting is necessary, target type has to be specified for each call&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not allow using synchronous &lt;code&gt;FaultTolerance&lt;/code&gt; to guard asynchonous actions et vice versa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not allow casting&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows guarding any type&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;created using &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;createAsync()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;only &lt;code&gt;create()&lt;/code&gt;, but it needs the target type (which may be sync or async)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;only &lt;code&gt;create()&lt;/code&gt;; the &lt;code&gt;call()&lt;/code&gt; method needs the target type (which may be sync or async)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparison of &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; and &lt;code&gt;@ApplyGuard&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ApplyGuard&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the &lt;code&gt;value()&lt;/code&gt; points to a bean of type &lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the &lt;code&gt;value()&lt;/code&gt; points to a bean of type &lt;code&gt;Guard&lt;/code&gt; or &lt;code&gt;TypedGuard&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ignores all other fault tolerance annotations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;supports &lt;code&gt;@Fallback&lt;/code&gt; and thread offload (&lt;code&gt;@Asynchronous&lt;/code&gt;, &lt;code&gt;@AsynchronousNonBlocking&lt;/code&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not support Kotlin &lt;code&gt;suspend&lt;/code&gt; functions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;supports Kotlin &lt;code&gt;suspend&lt;/code&gt; functions&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about migrating to the new programmatic API, see the migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.7.0/reference/programmatic-api.html#migration_from_faulttolerance&quot;&gt;Migration from &lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.7.0/reference/reusable.html#migration_from_applyfaulttolerance&quot;&gt;Migration from &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the &lt;code&gt;MutinyFaultTolerance&lt;/code&gt; API has no replacement.
The &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt; APIs support &lt;code&gt;Uni&lt;/code&gt; out of the box, if the Mutiny support library is present.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new_configuration_properties&quot;&gt;New Configuration Properties&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for new configuration properties was added.
The existing, MicroProfile Fault Tolerance-defined configuration still works, but the new configuration is properly scoped and looks more natural:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Existing config property&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New config property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;/&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.&quot;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;&quot;.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.&quot;&amp;lt;classname&amp;gt;&quot;.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.global.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;MP_Fault_Tolerance_NonFallback_Enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;MP_Fault_Tolerance_Metrics_Enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.metrics.enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the &lt;code&gt;&amp;lt;annotation&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;member&amp;gt;&lt;/code&gt; parts are changed from camel case
(&lt;code&gt;BeforeRetry&lt;/code&gt;, &lt;code&gt;methodName&lt;/code&gt;) to kebab case (&lt;code&gt;before-retry&lt;/code&gt;, &lt;code&gt;method-name&lt;/code&gt;).
Two annotation members are special cased to improve consistency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Retry/durationUnit&lt;/code&gt; moves to &lt;code&gt;retry.max-duration-unit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Retry/jitterDelayUnit&lt;/code&gt; moves to &lt;code&gt;retry.jitter-unit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These new configuration properties exist especially for Quarkus, where they will look Quarkus-native: instead of the &lt;code&gt;smallrye.faulttolerance&lt;/code&gt; prefix, they will start with &lt;code&gt;quarkus.fault-tolerance&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing should change externally, this release should be fully backward compatible.
But please do pay extra attention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>