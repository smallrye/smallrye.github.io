<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2024-05-16T13:10:28+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Jandex 3.2.0</title><link href="https://www.smallrye.io/blog/jandex-3-2-0/" rel="alternate" type="text/html" title="Jandex 3.2.0" /><published>2024-05-16T12:00:00+00:00</published><updated>2024-05-16T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.0&quot;&gt;release&lt;/a&gt; of Jandex 3.2.0.
This release contains a number of improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; This Jandex version increases the persistent format version.
Therefore, persistent indexes produced by this version will &lt;em&gt;not&lt;/em&gt; be readable by previous Jandex releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;annotation_overlay&quot;&gt;Annotation overlay&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An &lt;em&gt;annotation overlay&lt;/em&gt; was added to Jandex.
This is a layer on top of core Jandex that allows overriding annotations.
This is useful when Jandex is used as a language model and annotations are used directly as framework metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, there are &lt;em&gt;two&lt;/em&gt; annotation overlays: a default &lt;code&gt;AnnotationOverlay&lt;/code&gt;, which is immutable, and a &lt;code&gt;MutableAnnotationOverlay&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default annotation overlay accepts an &lt;code&gt;IndexView&lt;/code&gt; and a collection of &lt;code&gt;AnnotationTransformation&lt;/code&gt;s.
These transformations are applied lazily, whenever the annotation overlay is first asked for annotation information of any particular declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mutable annotation overlay only accepts an &lt;code&gt;IndexView&lt;/code&gt; and annotations may be added and removed freely, until the overlay is &lt;em&gt;frozen&lt;/em&gt;.
When it&amp;#8217;s frozen, a list of annotation transformations is returned so that a corresponding immutable annotation overlay may be constructed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you&amp;#8217;re familiar with the &lt;code&gt;AnnotationStore&lt;/code&gt; from from ArC or from RESTEasy Reactive, this is the very same concept, but the implementation is improved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_improvements&quot;&gt;Other improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for &lt;em&gt;sealed classes&lt;/em&gt; was added.
This includes two methods: &lt;code&gt;ClassInfo.isSealed()&lt;/code&gt; and &lt;code&gt;ClassInfo.permittedSubclasses()&lt;/code&gt;.
If a class is declared &lt;code&gt;sealed&lt;/code&gt;, the &lt;code&gt;isSealed()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;permittedSubclasses()&lt;/code&gt; method returns the names of permitted subclasses.
To inspect them further, they must be looked up from the index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together with this, the &lt;code&gt;ClassInfo.isFinal()&lt;/code&gt; and &lt;code&gt;ClassInfo.isAbstract()&lt;/code&gt; methods were also added, as a shortcut for the corresponding &lt;code&gt;Modifier&lt;/code&gt; methods called on &lt;code&gt;ClassInfo.flags()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An empty index (&lt;code&gt;EmptyIndex.INSTANCE&lt;/code&gt; or &lt;code&gt;IndexView.empty()&lt;/code&gt;) was added.
This is a very lightweight implementation of the &lt;code&gt;IndexView&lt;/code&gt; interface that always returns &lt;code&gt;null&lt;/code&gt; or an empty collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, a &lt;code&gt;StackedIndex&lt;/code&gt; was also added.
This is a new implementation of a composite index, which actually has well defined semantics in case the same class is present in the index multiple times (unlike &lt;code&gt;CompositeIndex&lt;/code&gt;, which didn&amp;#8217;t define this situation at all).
In a stacked index, if a class is seen in one of the indexes, it is completely ignored in other indexes &lt;em&gt;below&lt;/em&gt; the first one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The behavior of &lt;code&gt;Index.getKnownUsers()&lt;/code&gt; was improved.
Previously, this method only considered a class as a user of another class when a reference to the other class was listed in the  constant pool.
Since this Jandex version, a class is also considered as a user of another class when the other class is present in the signature of the class or any of its members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the Jandex Maven plugin will not produce an index for a module with the POM packaging.
This is a tiny breaking change that shouldn&amp;#8217;t affect anyone, but in case it does, the &lt;code&gt;&amp;lt;skipForPomPackaging&amp;gt;&lt;/code&gt; configuration option may be set to &lt;code&gt;false&lt;/code&gt; to revert to the previous behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last but not least, hash table collisions were significantly reduced when interning type variable references.
This should make indexing a lot faster in certain cases.
Thanks Patrick Reinhart for the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.8</title><link href="https://www.smallrye.io/blog/jandex-3-1-8/" rel="alternate" type="text/html" title="Jandex 3.1.8" /><published>2024-05-07T12:00:00+00:00</published><updated>2024-05-07T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-8</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-8/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.8&quot;&gt;release&lt;/a&gt; of Jandex 3.1.8.
This release contains two small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To locate a method from a &lt;code&gt;ClassInfo&lt;/code&gt;, one had to use the &lt;code&gt;ClassInfo.method(String, Type...)&lt;/code&gt; method.
With this release, one can also use &lt;code&gt;ClassInfo.method(String, List&amp;lt;Type&amp;gt;)&lt;/code&gt;.
Thanks Guillaume Smet for the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, in this release, the runtime memory consumption of Jandex was significantly improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.3.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-3-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.3.0" /><published>2024-04-11T08:00:00+00:00</published><updated>2024-04-11T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-3-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-3-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.3.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.3.0.
This release contains many fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@RetryWhen&lt;/code&gt; annotation was added, together with the corresponding methods in the programmatic API.
The annotation allows defining predicate-based retries, where a predicate can be provided not only for the exception, but also for the result.
This means that it is finally possible to retry on an undesirable result (such as &lt;code&gt;null&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;RateLimitException&lt;/code&gt; gained a new method &lt;code&gt;getRetryAfterMillis()&lt;/code&gt;.
It returns the number of milliseconds after which retry is possible.
Retrying sooner is guaranteed to be rate limited again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cause chain inspection was improved.
Previously, when the &lt;code&gt;@CircuitBreaker.failOn&lt;/code&gt;, &lt;code&gt;@Fallback.applyOn&lt;/code&gt; or &lt;code&gt;@Retry.retryOn&lt;/code&gt; annotation members were not specified, the cause chain inspection was useless, because these annotation members default to &lt;code&gt;Throwable&lt;/code&gt; (or &lt;code&gt;Exception&lt;/code&gt; in case of &lt;code&gt;@Retry&lt;/code&gt;).
In this release, when these annotation members have a default value, we skip the check and move straight to inspecting cause chains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance.Builder&lt;/code&gt; gained a new method &lt;code&gt;withThreadOffloadExecutor()&lt;/code&gt;.
It can be used to configure an executor for thread offloads.
If not set, the default executor, as provided by the integrator, is used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The programmatic API is now integrated with metrics, both in the CDI and in the standalone implementation.
The number of tasks currently scheduled for future execution by the timer is now also exposed via metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standalone implementation of the programmatic API has gained an integration API: &lt;code&gt;StandaloneFaultTolerance.configure()&lt;/code&gt;.
This is only useful for people who use the &lt;code&gt;smallrye-fault-tolerance-standalone&lt;/code&gt; artifact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, many microoptimizations in various parts of the core implementation were made.
Thanks Andrej Fink for the issues and pull requests!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.7</title><link href="https://www.smallrye.io/blog/jandex-3-1-7/" rel="alternate" type="text/html" title="Jandex 3.1.7" /><published>2024-03-14T09:00:00+00:00</published><updated>2024-03-14T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-7</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-7/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.7&quot;&gt;release&lt;/a&gt; of Jandex 3.1.7.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few utility methods are added to improve quality of life:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Type.create(Class)&lt;/code&gt; to create a &lt;code&gt;Type&lt;/code&gt; object from &lt;code&gt;java.lang.Class&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PrimitiveType.box()&lt;/code&gt; and &lt;code&gt;unbox()&lt;/code&gt; static methods for converting between primitive types and primitive wrapper classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two bugs were fixed in &lt;code&gt;AnnotationInstanceBuilder&lt;/code&gt; when adding class-valued members:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if given a &lt;code&gt;Class&lt;/code&gt; object, it was always assumed that it represents a class type; the &lt;code&gt;void&lt;/code&gt; pseudo-type, primitive types and array types were not handled correctly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if given a &lt;code&gt;Type&lt;/code&gt; object that represents a multi-dimensional array, it was incorrectly rejected&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bug was fixed in sorting classes during type annotation propagation.
Similar problem was already fixed before, but it turned out that with bytecode obfuscation, the previous fix was not effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, some dependencies of the Jandex Maven plugin were updated, mainly to fix a possible issue with indexing reproducibility.
Thanks Jorge Solórzano for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.6</title><link href="https://www.smallrye.io/blog/jandex-3-1-6/" rel="alternate" type="text/html" title="Jandex 3.1.6" /><published>2023-11-27T13:00:00+00:00</published><updated>2023-11-27T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-6</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.6&quot;&gt;release&lt;/a&gt; of Jandex 3.1.6.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1.3 &lt;a href=&quot;/blog/jandex-3-1-3/&quot;&gt;introduced&lt;/a&gt; the notion of annotation equivalence in the form of the &lt;code&gt;AnnotationInstance.equivalentTo()&lt;/code&gt; method.
This method is like &lt;code&gt;equals()&lt;/code&gt;, except it ignores the annotation target.
In this release, annotation equivalence is expanded with the introduction of &lt;code&gt;equivalenceHashCode()&lt;/code&gt;, a &lt;code&gt;hashCode()&lt;/code&gt;-like method that is consistent with &lt;code&gt;equivalentTo()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, &lt;code&gt;AnnotationInstance&lt;/code&gt; also gains a method &lt;code&gt;createEquivalenceProxy()&lt;/code&gt; which returns an &lt;code&gt;AnnotationInstanceEquivalenceProxy&lt;/code&gt;.
An &lt;em&gt;equivalence proxy&lt;/em&gt; is an object whose &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; implement equivalence (instead of equality) by delegating to &lt;code&gt;equivalentTo()&lt;/code&gt; and &lt;code&gt;equivalenceHashCode()&lt;/code&gt;.
As opposed to an &lt;em&gt;equivalence key&lt;/em&gt;, an equivalence proxy also provides access to the delegate &lt;code&gt;AnnotationInstance&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also fixes a NPE that could be observed when indexing certain classes that include the &lt;code&gt;Signature&lt;/code&gt; attribute on fields.
The JVM Specification says that field signatures are always reference type signatures, which is what the signature parser in Jandex assumed.
As it turns out, there are classes out there, in the wild, that use a primitive type signature as a field signature.
That would manifest as a NPE in previous Jandex releases, but this release accomodates this possibility.
Thanks Václav Muzikář for the issue report and reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in this release, Jandex provides somewhat nicer error message in case the parsed &lt;code&gt;.class&lt;/code&gt; file is not in fact a valid JVM class file and does not begin with the expected magic value.
Previously, the error message was just &lt;code&gt;Invalid Magic&lt;/code&gt;, which is funny but not very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.5</title><link href="https://www.smallrye.io/blog/jandex-3-1-5/" rel="alternate" type="text/html" title="Jandex 3.1.5" /><published>2023-09-22T10:00:00+00:00</published><updated>2023-09-22T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-5</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-5/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.5&quot;&gt;release&lt;/a&gt; of Jandex 3.1.5.
This release contains two small fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex heavily relies on interning (structural sharing) of objects for memory and storage efficiency.
If there&amp;#8217;s a lot of elements (such as fields) in the index that look basically the same (have the same name and type), you can be fairly sure that there will be just one instance representing them all.
When those elements are annotated and all the annotations also look basically the same, one might expect that the objects will still be shared.
Alas, that is not the case.
The &lt;code&gt;AnnotationInstance&lt;/code&gt; representation of annotations includes the &lt;em&gt;annotation target&lt;/em&gt; (the element that is annotated) and that &lt;code&gt;target&lt;/code&gt; is considered for annotation equality (&lt;code&gt;AnnotationInstance.equals()&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since interning is implemented using a hash table, objects that are &quot;basically the same&quot; but are not equal better have different hash codes, otherwise hash collisions will slow down indexing fairly significantly if there are many such objects.
Unfortunately, even though &lt;code&gt;AnnotationInstance.equals()&lt;/code&gt; considers the &lt;code&gt;target&lt;/code&gt; for equality, &lt;code&gt;AnnotationInstance.hashCode()&lt;/code&gt; simply ignores it.
This means that the significant indexing slowdowns actually may easily happen in practice.
This releases fixes that by including the annotation target in the &lt;code&gt;AnnotationInstance&lt;/code&gt; hash code, making collisions a lot less likely.
Thanks Aaron Ogburn for finding the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the Maven plugin configuration option &lt;code&gt;&amp;lt;indexName&amp;gt;&lt;/code&gt; also accepts (relative) paths instead of just file names.
This was supported in previous versions of the Jandex Maven plugin, but was dropped in Jandex 3.0.0 with the introduction of &lt;code&gt;&amp;lt;indexDir&amp;gt;&lt;/code&gt;.
Thanks Ryan Lubke for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.3</title><link href="https://www.smallrye.io/blog/jandex-3-1-3/" rel="alternate" type="text/html" title="Jandex 3.1.3" /><published>2023-08-28T10:00:00+00:00</published><updated>2023-08-28T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-3</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.3&quot;&gt;release&lt;/a&gt; of Jandex 3.1.3.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AnnotationInstance.equivalentTo()&lt;/code&gt; method was added that establishes the notion of &lt;em&gt;annotation equivalence&lt;/em&gt;.
Two annotation instances are equivalent if they have the same name (that is, the same annotation interface) and the same members.
The target of the annotation is ignored (unlike the &lt;code&gt;equals()&lt;/code&gt; method).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo.isStaticInitializer()&lt;/code&gt; method was added to distinguish the special &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt; methods (similarly to existing &lt;code&gt;isConstructor()&lt;/code&gt;, which distinguishes the special &lt;code&gt;&amp;lt;init&amp;gt;&lt;/code&gt; methods).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serialization compatibility with Jandex 2 was restored.
Jandex 3 added a new kind of types, type variable references, and at that time, the index serialization code was not adjusted properly.
Therefore, if Jandex 3 was asked to write an index of an older version, for consumption by Jandex 2, the result in fact was not readable by Jandex 2.
The fix is fortunately simple, because what Jandex 3 represents as a type variable reference, Jandex 2 always represents as an unresolved type variable.
So when emitting an index for Jandex 2, Jandex 3 can just serialize type variable references as unresolved type variables.
(Note that Jandex 3 may still produce unresolved type variables, for example when indexing an incomplete class path.)
Thanks Andrey Manzharov for the reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jandex Maven plugin now supports setting the index version that should be produced.
That way, you can upgrade your Jandex version yet keep the persistent index readable by older Jandex versions.
Of course, if the upgraded Jandex has a newer persistent index format that includes more information, the older version will &lt;em&gt;not&lt;/em&gt; contain the new information.
Thanks Andrey Manzharov for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jandex-jar&lt;/code&gt; goal of the Jandex Maven plugin was improved to not omit directory entries in the resulting JAR.
Thanks Hui Wang for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, multiple places in Jandex were changed to slightly reduce allocations.
Instead of allocating a regular &lt;code&gt;java.util.ArrayList&lt;/code&gt; and then an immutable wrapper, an immutable array-backed &lt;code&gt;List&lt;/code&gt; implementation is used directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.2.6</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-6/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.6" /><published>2023-07-25T12:00:00+00:00</published><updated>2023-07-25T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-6</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.6&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.6.
This is a tiny release with one fix for Maven users that enable strict checksum validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance uses Arquillian to run the MicroProfile Fault Tolerance TCK.
To do that, it imports the Arquillian BOM for managing dependency versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Arquillian 1.7.0 has unfortunately made a mistake in deploying checksums to Maven Central, and since SmallRye Fault Tolerance imports the Arquillian BOM in its &lt;em&gt;root&lt;/em&gt; POM, all Maven users that enable strict checksum validation and depend on SmallRye Fault Tolerance directly or transitively will observe checksum validation failures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the problem is fixed by no longer importing the Arquillian BOM in the root POM; instead, all the Arquillian dependency versions are managed by the TCK module.
The TCK module is not something people can depend on; for a while, we haven&amp;#8217;t even been releasing its binary to Maven Central.
Therefore, the scope of checksum validation failures is greatly reduced&amp;#8201;&amp;#8212;&amp;#8201;they can only happen in the SmallRye Fault Tolerance project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small fix for the circuit breaker state diagram in the documentation is also included.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.2.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-4/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.4" /><published>2023-06-21T12:00:00+00:00</published><updated>2023-06-21T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.4&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.4.
This is a tiny release with one bugfix for Micrometer integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a gauge is registered with Micrometer, a &lt;em&gt;state object&lt;/em&gt; is passed to Micrometer along with a &lt;em&gt;value extraction function&lt;/em&gt;.
That value extraction function is supposed to extract the actual gauge value from the state object.
In SmallRye Fault Tolerance, the state object is a &lt;code&gt;Supplier&lt;/code&gt; and the value extraction function just calls the &lt;code&gt;get&lt;/code&gt; method on the &lt;code&gt;Supplier&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issue is that Micrometer only holds onto the state object weakly (using &lt;code&gt;WeakReference&lt;/code&gt;).
If the state object is GC-ed, Micrometer will report &lt;code&gt;NaN&lt;/code&gt; as the gauge value.
Since the &lt;code&gt;Supplier&lt;/code&gt; in SmallRye Fault Tolerance is not used anywhere else, gauges typically don&amp;#8217;t report the proper value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, we make sure that the &lt;code&gt;Supplier&lt;/code&gt;s do not become garbage, so gauges work correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, a test for fault tolerance on interface-based beans was simplified, together with the implementation of RestClient interface-based beans in RESTEasy MicroProfile (which is what this test mimics).
Thanks Matěj Novotný for the PR!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.2</title><link href="https://www.smallrye.io/blog/jandex-3-1-2/" rel="alternate" type="text/html" title="Jandex 3.1.2" /><published>2023-06-08T14:00:00+00:00</published><updated>2023-06-08T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.2&quot;&gt;release&lt;/a&gt; of Jandex 3.1.2.
It includes a significant internal refactoring of method parameter names and synthetic parameters handling, as well as one small API improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JDK 18 and JDK 21 made some changes in &lt;code&gt;javac&lt;/code&gt; that required refactoring of how synthetic/mandated parameters and parameters names are handled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8271623&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8271623&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8292275&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, method parameter handling is more robust.
Thanks Christian Beikov for the bug report and reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo&lt;/code&gt; class now exposes the &lt;code&gt;isDefault()&lt;/code&gt; and &lt;code&gt;isBridge()&lt;/code&gt; methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isDefault()&lt;/code&gt; returns whether the method is a &lt;code&gt;default&lt;/code&gt; method declared on an interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isBridge()&lt;/code&gt; returns whether the method is a synthetic bridge method&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks Martin Kouba for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry></feed>