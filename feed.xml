<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2022-11-24T12:34:59+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Jandex 3.0.4</title><link href="https://www.smallrye.io/blog/jandex-3-0-4/" rel="alternate" type="text/html" title="Jandex 3.0.4" /><published>2022-11-24T11:00:00+00:00</published><updated>2022-11-24T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-4</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.0.4&quot;&gt;release&lt;/a&gt; of Jandex 3.0.4.
It includes one bug fix and a few tiny API improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most important change in this release is a workaround for wrong type paths on type annotations emitted by the Kotlin JVM bytecode compiler.
If a Kotlin type that uses variance is present in a method signature, for example as a parameter, the Kotlin compiler emits a generic signature that may include a wildcard type.
That happens for types such as &lt;code&gt;List&lt;/code&gt; (which is covariant in its type parameter in Kotlin) or &lt;code&gt;Continuation&lt;/code&gt; (which is used to compile &lt;code&gt;suspend&lt;/code&gt; functions, and its type parameter is contravariant).
When that type includes type annotations, such as &lt;code&gt;List&amp;lt;List&amp;lt;@NotNull String&amp;gt;&amp;gt;&lt;/code&gt;, the type path emitted by the compiler for this type may end up inconsistent with the generic signature.
For more details about the issue, see &lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-55128&quot;&gt;KT-55128&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex used to throw an exception when stumbling upon a type annotation with wrong type path.
That&amp;#8217;s not very nice&amp;#8201;&amp;#8212;&amp;#8201;Jandex should be able to consume bytecode that exists in the wild.
The fix simply somewhat degrades Jandex functionality to be able to survive the inconsistency.
Specifically, the type annotation with wrong type path is ignored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a small quality of life improvement, the method &lt;code&gt;ClassType.create()&lt;/code&gt; was added to create instances of &lt;code&gt;ClassType&lt;/code&gt;.
This has already been possible using &lt;code&gt;Type.create()&lt;/code&gt;, but the new method is more convenient in a lot of cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, the documentation for classes &lt;code&gt;ParameterizedType&lt;/code&gt; and &lt;code&gt;ClassSummary&lt;/code&gt; was improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.0.3</title><link href="https://www.smallrye.io/blog/jandex-3-0-3/" rel="alternate" type="text/html" title="Jandex 3.0.3" /><published>2022-11-09T13:00:00+00:00</published><updated>2022-11-09T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-3</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.0.3&quot;&gt;release&lt;/a&gt; of Jandex 3.0.3.
It includes one small bug fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It turns out some JVM languages (e.g. Groovy) may generate inner classes where the constructor doesn&amp;#8217;t take an enclosing instance as a parameter.
Jandex since version 3.0.0 assumed that inner classes always have such constructor parameter.
This release relaxes this assumption so that Groovy classes can be indexed correctly.
Thanks Emond Papegaaij for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.0.2</title><link href="https://www.smallrye.io/blog/jandex-3-0-2/" rel="alternate" type="text/html" title="Jandex 3.0.2" /><published>2022-11-08T08:00:00+00:00</published><updated>2022-11-08T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.0.2&quot;&gt;release&lt;/a&gt; of Jandex 3.0.2.
It includes a small bug fix, together with a tiny API improvement, and also some infrastructure work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A method was added to determine if a method is in fact a constructor: &lt;code&gt;MethodInfo.isConstructor()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bug in parsing type annotations on constructors of inner classes was fixed.
Thanks Falko Modler for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, the build process was refactored to avoid downloading a second JDK when the build JDK is &amp;gt;= 17.
This should significantly improve the workflow for downstream, air-gapped rebuilds of Jandex.
Also, some community standards were adopted: code of conduct, contributing and security documents are now present in the repository.
Thanks Jeff Mesnil for driving that!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 5.6.0 and 6.1.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-6-0-and-6-1-0/" rel="alternate" type="text/html" title="Fault Tolerance 5.6.0 and 6.1.0" /><published>2022-10-25T15:00:00+00:00</published><updated>2022-10-25T15:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-6-0-and-6-1-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-6-0-and-6-1-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.6.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.6.0.
This release includes several new features, one important deprecation and one important bug fix.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;rate_limiting&quot;&gt;Rate limiting&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance adds a new fault tolerance strategy: &lt;code&gt;@RateLimit&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rate limit enforces a maximum number of permitted invocations in a time window of some length.
For example, with a rate limit, one can make sure that a method may only be called 50 times per minute.
Invocations that would exceed the limit are rejected with an exception of type &lt;code&gt;RateLimitException&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rate limit is superficially similar to a bulkhead (concurrency limit), but is in fact quite different.
Bulkhead limits the number of executions happening concurrently at any point in time.
Rate limit limits the number of executions in a time window of some length, without considering concurrency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@RateLimit(value = 50, window = 1, windowUnit = ChronoUnit.MINUTES)
public void doSomething() {
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This makes sure that &lt;code&gt;doSomething&lt;/code&gt; may only be called 50 times per minute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 3 kinds of rate limiting that can be configured using &lt;code&gt;@RateLimit(type = ...)&lt;/code&gt;.
They correspond to the most common rate limiting algorithms:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RateLimitType.FIXED&lt;/code&gt;: a &lt;em&gt;fixed window&lt;/em&gt; kind of rate limiting; this is the default&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RateLimitType.ROLLING&lt;/code&gt;: a &lt;em&gt;sliding log&lt;/em&gt; kind of rate limiting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RateLimitType.SMOOTH&lt;/code&gt;: a &lt;em&gt;token bucket&lt;/em&gt; kind of rate limiting (could also be called rate shaping or rate smoothing)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, it is possible to define minimum spacing between invocations.
For example, with minimum spacing of 1 second, if a second invocation happens 500 millis after the first, it is rejected even if the limit wouldn&amp;#8217;t be exceeded yet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lifecycle&quot;&gt;Lifecycle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since rate limit is a stateful fault tolerance strategy, it is important to consider its lifecycle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Currently, rate limit is a global singleton, just like circuit breaker or bulkhead.
SmallRye Fault Tolerance doesn&amp;#8217;t allow changing it at the moment, so e.g. rate limit per user is currently impossible to implement.
This is something we &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/438&quot;&gt;plan to address&lt;/a&gt; in the future, so feedback is welcome!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;other_annotations&quot;&gt;Other annotations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@RateLimit&lt;/code&gt; can be used together with all other fault tolerance annotations, as usual.
 If a method would hypothetically declare all fault tolerance annotations, the fault tolerance strategies would be nested like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;Fallback(
    Retry(
        CircuitBreaker(
            RateLimit(
                Timeout(
                    Bulkhead(
                        ... the guarded method ...
                    )
                )
            )
        )
    )
)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A lot more information about rate limiting can be found &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.6.0/usage/extra.html#_rate_limit&quot;&gt;in the documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new_annotation_for_asynchronous_non_blocking_methods&quot;&gt;New annotation for asynchronous non-blocking methods&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance used to discourage &lt;code&gt;@Asynchronous&lt;/code&gt; and recommend &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; instead.
This is problematic, because the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations are used by various containers to affect how the container invokes the method.
If a container executes a &lt;code&gt;@Blocking&lt;/code&gt; method on another thread, and that method applies some fault tolerance strategy, then SmallRye Fault Tolerance would execute it on yet another thread.
This is hardly optimal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, starting with SmallRye Fault Tolerance 5.6.0 / 6.1.0, &lt;strong&gt;the usage of &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; &lt;em&gt;for fault tolerance purposes&lt;/em&gt; is deprecated&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The recommendation is to use &lt;code&gt;@Asynchronous&lt;/code&gt; for methods that require offloading execution to another thread.
For asynchronous methods that do not require thread offload and return &lt;code&gt;CompletionStage&lt;/code&gt; (or some other async type such as &lt;code&gt;Uni&lt;/code&gt;), the recommendation is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;in non-compatible mode, no additional annotation is necessary, it is detected automatically;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in fully compatible mode, use &lt;code&gt;@AsynchronousNonBlocking&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@AsynchronousNonBlocking&lt;/code&gt; is a new annotation introduced by SmallRye Fault Tolerance in this version.
The &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.6.0/usage/extra.html#async-nonblocking&quot;&gt;relevant section in the documentation&lt;/a&gt; was thoroughly revised and contains all the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance will recognize and support the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations for the entire lifecycle of 5.x and 6.x.
Support for these annotations will be removed in SmallRye Fault Tolerance 7.0.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This does &lt;em&gt;not&lt;/em&gt; imply that these annotations should be avoided for other purposes.
This change only affects SmallRye Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fallback_methods_with_exception_parameter&quot;&gt;Fallback methods with exception parameter&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the non-compatible mode, SmallRye Fault Tolerance supports access to the causing exception in a &lt;code&gt;@Fallback&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A fallback method, as defind by the MicroProfile Fault Tolerance specification, must have the same parameters as the guarded method.
SmallRye Fault Tolerance permits defining one additional parameter, at the end of the parameter list, which must be of an exception type.
If such parameter is defined, the exception that caused the fallback will be supplied in it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @Fallback(fallbackMethod = &quot;fallback&quot;)
    public String doSomething(String param) {
        ...
    }

    public String fallback(String param, IllegalArgumentException cause) {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is possible to declare multiple overloads of the fallback method, each having different type of the exception parameter.
It is also possible to declare fallback method(s) with an exception parameter together with a fallback method without an exception parameter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, see &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.6.0/usage/extra.html#_fallback_method_with_exception_parameter&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;circuit_breaker_state_transitions&quot;&gt;Circuit breaker state transitions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The circuit breaker implementation in SmallRye Fault Tolerance used to perform state transitions only during invocations (that is, synchronously).
This is easy to implement and doesn&amp;#8217;t affect correctness of the circuit breaker algorithm, so there&amp;#8217;s nothing wrong with it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, SmallRye Fault Tolerance also allows external observation of the circuit breaker state.
With the existing implementation of state transitions only during invocations, such external observations would be correct when moving from closed to open and from half-open to closed (because these transitions are defined to happen as a result of an invocation), but would &lt;em&gt;not&lt;/em&gt; necessarily be correct when moving from open to half-open (which is defined to happen after certain amount of time, regardless of invocations).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if the circuit breaker is configured to transition from open to half-open after 5 seconds, but there are no invocations for 10 seconds, then external observers would see the circuit breaker staying open for twice the time it should be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, the circuit breaker will perform transitions from open to half-open asynchronously, using a timer.
This means that external observers of the circuit breaker state will always be correct.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;smallrye_fault_tolerance_6_1_0&quot;&gt;SmallRye Fault Tolerance 6.1.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coming together with SmallRye Fault Tolerance 5.6.0 is the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.1.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.1.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance 6.1.0 is the 6.x release corresponding to 5.6.0.
That is, it has all the features of 5.6.0, but requires Java 11 at minimum and uses the Jakarta EE 9 and MicroProfile 5.0 APIs.
See &lt;a href=&quot;/blog/fault-tolerance-6-0-0/&quot;&gt;the previous announcement&lt;/a&gt; for more details about the correspondence between 5.x and 6.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.0.1</title><link href="https://www.smallrye.io/blog/jandex-3-0-1/" rel="alternate" type="text/html" title="Jandex 3.0.1" /><published>2022-09-16T12:00:00+00:00</published><updated>2022-09-16T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few weeks after &lt;a href=&quot;/blog/jandex-3-0-0&quot;&gt;releasing&lt;/a&gt; Jandex 3.0.0, we&amp;#8217;re back with a fresh new bugfix release: 3.0.1.
It includes a small number of bug fixes and API improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Methods for accessing enum constants were added: &lt;code&gt;ClassInfo.enumConstants()&lt;/code&gt; and &lt;code&gt;FieldInfo.enumConstantOrdinal()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Shortcut methods for annotation access were added to &lt;code&gt;AnnotationTarget&lt;/code&gt;, so that you no longer have to manually construct an annotation &lt;code&gt;DotName&lt;/code&gt;.
All annotation-accessing methods now have an overload that takes a &lt;code&gt;String&lt;/code&gt; and also &lt;code&gt;Class&amp;lt;? extends Annotation&amp;gt;&lt;/code&gt;.
Note that if you use those methods frequently, it is still recommended to create constant &lt;code&gt;DotName&lt;/code&gt;s and use them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, &lt;code&gt;DotName.createSimple()&lt;/code&gt; has a variant that takes &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;.
This shortens the common style of invocation from &lt;code&gt;DotName.createSimple(MyClass.class.getName())&lt;/code&gt; to &lt;code&gt;DotName.createSimple(MyClass.class)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;TypeVariable.hashCode()&lt;/code&gt; method used to have a serious bitmasking issue ever since the cached &lt;code&gt;hash&lt;/code&gt; field was repurposed to also store one bit of extra information (whether there&amp;#8217;s an implicit &lt;code&gt;Object&lt;/code&gt; bound).
This bug caused the &lt;code&gt;hashCode()&lt;/code&gt; method to return different values over time.
That is fixed now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bug in propagating type variable annotations led to an exception when indexing certain classes, including the Guava JAR.
This is fixed in 3.0.1.
Thanks Mike Edgar for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The introduction of &lt;code&gt;TypeVariableReference&lt;/code&gt;s in 3.0.0 caused a problem in &lt;code&gt;Type&lt;/code&gt; equality and hash code.
This is now fixed and all &lt;code&gt;Type&lt;/code&gt;s have proper structural equality and hash code again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, the javadoc was improved on many places.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you experience any troubles, or if you have any exciting ideas for Jandex, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.0.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-0-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.0.0" /><published>2022-09-07T14:00:00+00:00</published><updated>2022-09-07T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-0-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-0-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.0.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.0.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release implements MicroProfile Fault Tolerance 4.0 and therefore supports Jakarta EE 9 / MicroProfile 5.0.
Implementation-wise, the 6.0.0 release corresponds to &lt;a href=&quot;/blog/fault-tolerance-5-5/&quot;&gt;SmallRye Fault Tolerance 5.5.0&lt;/a&gt;.
Additionally, SmallRye Fault Tolerance 6.0.0 requires Java 11 at minimum; it is no longer compatible with Java 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the time being, we will produce releases both in the 5.x and 6.x streams.
There will always be a direct correspondence between a 5.x and a 6.x release:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;5.x release&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Corresponding 6.x release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.4.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.0.0-RC2&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.4.1&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.0.0-RC3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.5.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.0.0-RC4&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.5.0&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.0.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.5.1 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.0.1 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.6.0 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.1.0 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.6.1 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.1.1 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;5.7.0 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;6.2.0 (hypothetically)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point, we&amp;#8217;ll stop producing releases in the 5.x stream.
Shortly after that, we&amp;#8217;ll upgrade the basic dependencies (Jakarta CDI etc.) to their Jakarta EE 10 versions.
Since Jakarta EE 9 is mostly a transition release and runtimes we&amp;#8217;re aware of target Jakarta EE 10 anyway, we likely won&amp;#8217;t bump a major version for that.
In other words, the upgrade to Jakarta EE 10 base will happen in the 6.x stream and will not require a 7.0 release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any problems or ideas, including objections to the plan stated above, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.0.0</title><link href="https://www.smallrye.io/blog/jandex-3-0-0/" rel="alternate" type="text/html" title="Jandex 3.0.0" /><published>2022-08-25T19:00:00+00:00</published><updated>2022-08-25T19:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex is a space efficient Java class file indexer and offline reflection library.
For many years, it lived in the WildFly GitHub organization, as it was originally written for WildFly (actually for JBoss AS 7, WildFly&amp;#8217;s predecessor).
Recently, Quarkus accelerated Jandex usage outside of WildFly, prompting for higher pace of bug fixes and new features, and we felt that WildFly is no longer the best home for Jandex.
With a hint of sadness, we bid farewell to WildFly (you&amp;#8217;ve been the best for long!) and are proud to announce that we settle comfortably in the SmallRye space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye started as a set of implementations of MicroProfile specifications that could be shared among various runtimes, but it has long been way more than that.
Importantly, both WildFly and Quarkus use SmallRye components, so Jandex is certainly no stranger here.
To highlight that, without further ado, we announce the first release of Jandex in SmallRye, version 3.0.0!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 contains many bug fixes and features and, given the major version bump, also some breaking changes.
But fear not&amp;#8201;&amp;#8212;&amp;#8201;upgrading is still pretty easy.
The full list of changes &lt;a href=&quot;https://github.com/smallrye/jandex/milestone/3?closed=1&quot;&gt;can be found&lt;/a&gt; in the Jandex issue tracker (which, by the way, moved to GitHub Issues a while ago).
Here, we&amp;#8217;ll highlight all the important ones and describe how to migrate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the following text is pretty long and detailed.
If you want a TLDR, feel free to skip to the &lt;a href=&quot;#summary&quot;&gt;summary&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;move_to_smallrye&quot;&gt;Move to SmallRye&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned, Jandex is now a SmallRye project.
As part of that, we&amp;#8217;ve consolidated all the Jandex projects into a single repository: &lt;a href=&quot;https://github.com/smallrye/jandex/&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/jandex/&lt;/a&gt;.
This means that the Jandex Maven plugin is released together with Jandex core, and if you contribute, you no longer have to add test classes to a dedicated &lt;code&gt;typeannotation-test&lt;/code&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This also entails a change in Maven coordinates.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Old coordinates&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New coordinates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;org.jboss:jandex&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.smallrye:jandex&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;org.jboss.jandex:jandex-maven-plugin&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.smallrye:jandex-maven-plugin&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: if you use the Maven Enforcer plugin, configure it to ban any dependencies on &lt;code&gt;org.jboss:jandex&lt;/code&gt;.
Similar plugin exists for Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;move_to_java_8&quot;&gt;Move to Java 8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 2.x is a Java 6 project.
That has never been a problem, but Java 6 is just too old these days.
However, Jandex has always been and continues to be conservative.
Even though the major Jandex consumers we know of require Java 11 now, Jandex only bumps to Java 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing changes on the ability to parse new Java bytecode.
Jandex running on Java 8 can still parse Java 17 bytecode just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: if you are not on Java 8+ yet, you really should be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uniform_annotation_access&quot;&gt;Uniform annotation access&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Accessing annotations has been the original primary use case for Jandex.
However, it has never been very uniform.
The &lt;code&gt;ClassInfo&lt;/code&gt; type has different methods to access annotations than &lt;code&gt;MethodInfo&lt;/code&gt; or &lt;code&gt;FieldInfo&lt;/code&gt;.
The &lt;code&gt;AnnotationTarget&lt;/code&gt; interface, which all &quot;annotated things&quot; implement, has no annotation-related methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Jandex 3.0.0, this changes.
The &lt;code&gt;AnnotationTarget&lt;/code&gt; interface gains a slew of method for accessing annotations.
There are 2 kinds of them, actually:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;methods that access annotations directly on the target;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;methods that access annotations on the target and all nested annotation targets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2nd is how Jandex used to always operate, but the 1st is often what you need.
Now, both options are available.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Directly on the target&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;On the target and nested targets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Has annotation of given type?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;hasDeclaredAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;hasAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get single annotation of given type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations of given type (not repeatable)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;doesn&amp;#8217;t make sense, there may only be one&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotations(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations of given type, including repeatable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotationsWithRepeatable(DotName, IndexView)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotationsWithRepeatable(DotName, IndexView)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotations()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotations()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; there used to be a &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; method returning a &lt;code&gt;Map&lt;/code&gt;.
That method is renamed to &lt;code&gt;ClassInfo.annotationsMap()&lt;/code&gt;.
The &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; method returns a &lt;code&gt;List&lt;/code&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call the &lt;code&gt;Map&lt;/code&gt;-returning &lt;code&gt;annotations()&lt;/code&gt; method on &lt;code&gt;ClassInfo&lt;/code&gt;, move to &lt;code&gt;annotationsMap()&lt;/code&gt;.
Note that callers of this method compiled against Jandex 2.x will continue running correctly, because Jandex 3.0.0 includes a synthetic bridge method for binary compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;classAnnotation()&lt;/code&gt;, &lt;code&gt;classAnnotationsWithRepeatable()&lt;/code&gt; and &lt;code&gt;classAnnotations()&lt;/code&gt; methods on &lt;code&gt;ClassInfo&lt;/code&gt; are now deprecated, with the corresponding &lt;code&gt;declaredAnnotation*&lt;/code&gt; methods being the suggested replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call any of the &lt;code&gt;classAnnotation*&lt;/code&gt; methods on &lt;code&gt;ClassInfo&lt;/code&gt;, move to &lt;code&gt;declaredAnnotation*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call the existing methods that access annotations both on the target and nested annotation targets, and then filter them out to retain only the annotations declared directly on the target, use the &lt;code&gt;declaredAnnotation*&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uniform_method_parameter_access&quot;&gt;Uniform method parameter access&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex uses the &lt;code&gt;MethodInfo&lt;/code&gt; class to represent methods and &lt;code&gt;MethodParameterInfo&lt;/code&gt; to represent method parameters.
However, &lt;code&gt;MethodInfo&lt;/code&gt; used to never expose any access to &lt;code&gt;MethodParameterInfo&lt;/code&gt;.
You could only access parameters from &lt;code&gt;MethodInfo&lt;/code&gt; through the &lt;code&gt;parameterName(int)&lt;/code&gt; and &lt;code&gt;parameters()&lt;/code&gt; methods, where the &lt;code&gt;parameterName()&lt;/code&gt; returned the name of given parameter, while &lt;code&gt;parameters()&lt;/code&gt; returned the list of parameter types.
The &lt;code&gt;MethodParameterInfo&lt;/code&gt; class was only used to represent a target of &lt;code&gt;AnnotationInstance&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not very convenient.
In Jandex 3.0.0, &lt;code&gt;MethodInfo&lt;/code&gt; has several methods to access parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parametersCount()&lt;/code&gt;: returns the number of parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterTypes()&lt;/code&gt;: returns the list of parameter types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterName(int)&lt;/code&gt;: returns the name of given parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterType(int)&lt;/code&gt;: returns the type of given parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameters()&lt;/code&gt;: returns the list of parameters as &lt;code&gt;MethodParameterInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; there used to be a &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; method returning a &lt;code&gt;List&amp;lt;Type&amp;gt;&lt;/code&gt;.
That method is renamed to &lt;code&gt;MethodInfo.parameterTypes()&lt;/code&gt;.
The &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; method returns &lt;code&gt;List&amp;lt;MethodParameterInfo&amp;gt;&lt;/code&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; inspect your code that accesses method parameters.
It can usually be simplified using the newly introduced methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;synthetic_and_mandated_parameters&quot;&gt;Synthetic and mandated parameters&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to parameters explicitly declared in the source code, bytecode generators (such as &lt;code&gt;javac&lt;/code&gt;) sometimes have to emit additional parameters.
When these parameters are prescribed by the Java Language Specification (JLS), they are called &lt;em&gt;implicitly declared&lt;/em&gt; or &lt;em&gt;mandated&lt;/em&gt;.
Otherwise, they are an unspecified artifact of compiler implementation and are called &lt;em&gt;synthetic&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex used to pretty much not care.
Sometimes, you would see these extra parameters, while sometimes, you would not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jandex 3.0.0, the parameter accessing methods mentioned above never return synthetic and mandated parameters.
(At least in the vast majority of cases.
Jandex uses the &lt;code&gt;Signature&lt;/code&gt; bytecode attribute and a few simple heuristics to figure out the list of explicitly declared parameters.
It seems &lt;code&gt;javac&lt;/code&gt; emits the &lt;code&gt;Signature&lt;/code&gt; attribute for all methods that have synthetic/mandated parameters, even if it wouldn&amp;#8217;t have to, so classes compiled with &lt;code&gt;javac&lt;/code&gt; should be fine.
There are rare cases, involving constructors of local/anonymous classes that capture lexically enclosing variables, where Jandex will return synthetic/mandated parameters for classes compiled with ECJ.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For special occasions where access to the full list of method parameters (based on the method descriptor) is required, there are 2 more methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;descriptorParametersCount()&lt;/code&gt;: returns the number of parameters including synthetic/mandated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;descriptorParameterTypes()&lt;/code&gt;: returns the list of parameter types including synthetic/mandated&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The parameter types obtained from method descriptor are never annotated and their position in the list &lt;em&gt;cannot&lt;/em&gt; be used to obtain a parameter name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; in most cases, you don&amp;#8217;t need these methods.
Use the &lt;code&gt;parameter*&lt;/code&gt; methods by default and only resort to &lt;code&gt;descriptorParameter*&lt;/code&gt; when you need to.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proper_representation_of_recursive_type_parameters&quot;&gt;Proper representation of recursive type parameters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex includes a faithful representation of the Java type system, including generic types.
Type parameters, and type variables in general, used to be represented by one of the following 2 classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnresolvedTypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A type variable can be unresolved for example when you&amp;#8217;re indexing an incomplete classpath.
However, with Jandex 2.x, a type variable may also be unresolved when it occurs in its own definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, one often defines type parameters like &lt;code&gt;&amp;lt;T extends Comparable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.
This type parameter definition is &lt;em&gt;recursive&lt;/em&gt; in &lt;code&gt;T&lt;/code&gt;.
Since Jandex types generally do not form cycles, the first occurence of &lt;code&gt;T&lt;/code&gt; is represented as &lt;code&gt;TypeVariable&lt;/code&gt;, but the second occurence as &lt;code&gt;UnresolvedTypeVariable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To become more faithful yet still avoid cycles in the object model, Jandex 3.0.0 includes an additional representation of type variables occuring in their own definition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariableReference&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Jandex 3.0.0, the second occurence of &lt;code&gt;T&lt;/code&gt; in the example above is represented as &lt;code&gt;TypeVariableReference&lt;/code&gt;.
A reference may be &lt;code&gt;follow()&lt;/code&gt;-ed to obtain the type variable it points to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if your code has special cases for handling &lt;code&gt;UnresolvedTypeVariable&lt;/code&gt; or &lt;code&gt;Type.Kind.UNRESOLVED_TYPE_VARIABLE&lt;/code&gt;, it is a good sign that it needs to be updated to deal with &lt;code&gt;TypeVariableReference&lt;/code&gt; or &lt;code&gt;Type.Kind.TYPE_VARIABLE_REFERENCE&lt;/code&gt;.
And even if not, it is a good idea to test your code with some recursively defined type parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if your code processes types in a recursive manner, you need to take care to avoid infinite regress.
&lt;code&gt;follow()&lt;/code&gt;-ing a &lt;code&gt;TypeVariableReference&lt;/code&gt; and processing the resulting &lt;code&gt;TypeVariable&lt;/code&gt; recursively is most likely &lt;strong&gt;not&lt;/strong&gt; what you want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;changed_indexer_index_return_type&quot;&gt;Changed &lt;code&gt;Indexer.index()&lt;/code&gt; return type&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Indexer.index(InputStream)&lt;/code&gt; method, as well as the &lt;code&gt;indexClass(Class&amp;lt;?&amp;gt;)&lt;/code&gt; method, used to return &lt;code&gt;ClassInfo&lt;/code&gt; of the just-indexed class.
This is convenient, but prevents additional post-processing during &lt;code&gt;Indexer.complete()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jandex 2.x, there was no such post-processing, but Jandex 3.0.0 adds some.
Notably, post-processing is required for propagating type annotations on type variables across nested classes, as well as resolving unresolved type variables across nested classes and patching the resulting type variable references.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; the &lt;code&gt;Indexer.index(InputStream)&lt;/code&gt; and &lt;code&gt;indexClass(Class&amp;lt;?&amp;gt;)&lt;/code&gt; methods now have a return type of &lt;code&gt;void&lt;/code&gt;.
You have to build a complete &lt;code&gt;Index&lt;/code&gt; to be able to obtain a &lt;code&gt;ClassInfo&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you create a one-off &lt;code&gt;Indexer&lt;/code&gt; to index a single class, you can simplify your code using &lt;code&gt;Index.singleClass()&lt;/code&gt;.
Note that callers of &lt;code&gt;Indexer.index()&lt;/code&gt; / &lt;code&gt;indexClass()&lt;/code&gt; compiled against Jandex 2.x will continue running, because Jandex 3.0.0 includes a synthetic bridge method for binary compatibility.
That bridge method always returns &lt;code&gt;null&lt;/code&gt; though.
If you want to keep compiling against Jandex 2.x and add compatibility with Jandex 3.0.0, you need to ignore the return value of &lt;code&gt;Indexer.index()&lt;/code&gt; / &lt;code&gt;indexClass()&lt;/code&gt;, or at least handle &lt;code&gt;null&lt;/code&gt; result gracefully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;class_retained_annotations&quot;&gt;Class-retained annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 2.x only indexes annotations with &lt;code&gt;@Retention&lt;/code&gt; of &lt;code&gt;RUNTIME&lt;/code&gt;.
With Jandex 3.0.0, annotations with retention of &lt;code&gt;CLASS&lt;/code&gt; are indexed as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is technically a breaking change, but shouldn&amp;#8217;t really affect anyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; you can distinguish class-retained annotations from runtime-retained by calling &lt;code&gt;AnnotationInstance.runtimeVisible()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;navigation_for_interfaces_and_packages&quot;&gt;Navigation for interfaces and packages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some methods were added to &lt;code&gt;Index&lt;/code&gt;, and actually to &lt;code&gt;IndexView&lt;/code&gt;, to navigate the interface hierarchy and package structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getKnownDirectSubinterfaces()&lt;/code&gt;: returns all known direct subinterfaces of the specified interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getAllKnownSubinterfaces()&lt;/code&gt;: returns all known interfaces that extend the given interface, directly and indirectly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getClassesInPackage()&lt;/code&gt;: returns all classes present in given package (but not in subpackages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getSubpackages()&lt;/code&gt;: returns direct subpackages of given package (but not indirect subpackages)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is a breaking change if you implement the &lt;code&gt;IndexView&lt;/code&gt; interface.
Such implementations typically delegate to some other &lt;code&gt;IndexView&lt;/code&gt;, in which case, adaptation should be straightforward.
Otherwise, consult the javadoc of these methods for more precise description.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 doesn&amp;#8217;t break the behavior of &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; and &lt;code&gt;getAllKnownImplementors()&lt;/code&gt;.
These methods are still inconsistent in that &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; returns subinterfaces and classes implementing the interface, while &lt;code&gt;getAllKnownImplementors()&lt;/code&gt; only returns classes implementing the interface.
It was tempting to fix this inconsistency, but in the end, we decided it was not worth the potential trouble.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;added_annotationinstance_builder&quot;&gt;Added &lt;code&gt;AnnotationInstance&lt;/code&gt; builder&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make life of Quarkus extension authors that create their own &lt;code&gt;AnnotationInstance&lt;/code&gt;s easier, we introduced a builder.
The previously existing &lt;code&gt;AnnotationInstance.create()&lt;/code&gt; methods are not going away, they are not even deprecated, they are just more difficult to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; use &lt;code&gt;AnnotationInstance.builder()&lt;/code&gt; instead of &lt;code&gt;AnnotationInstance.create()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maven_plugin_changes&quot;&gt;Maven plugin changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned above, the Jandex Maven plugin has been merged into the Jandex codebase.
Moving forward, you won&amp;#8217;t have to track which Jandex Maven plugin version corresponds to which Jandex release: they are released together now and always have the same version number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some changes and improvements in the Maven plugin, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, one execution of the Jandex Maven plugin now always produces a single index.
Previously, each file set configured in the Jandex Maven plugin execution produced its own index.
This is counter-intuitive and usually not what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is a breaking change, but shouldn&amp;#8217;t hopefully affect anyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; use multiple executions of the Jandex Maven plugin if you need to produce multiple Jandex indices during Maven build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the file set configuration allows configuring a &lt;em&gt;dependency&lt;/em&gt; in addition to a directory.
This is useful if your artifact should carry an index including not only its own classes, but also classes from some of its dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And lastly, a new goal &lt;code&gt;jandex-jar&lt;/code&gt; was added to the Maven plugin to allow reindexing an already existing JAR.
This is useful for example in combination with shading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; the Maven plugin is described pretty well in the &lt;a href=&quot;https://smallrye.io/jandex/&quot;&gt;Jandex documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_smaller_changes&quot;&gt;Other smaller changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a few more changes, but those are smaller and less impactful, so we&amp;#8217;ll just describe them briefly here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; the &lt;code&gt;IndexReader.getDataVersion()&lt;/code&gt; method was removed.
To the best of our knowledge, noone has actually ever used it, and the return value was wrong (didn&amp;#8217;t conform to the contract stated in the javadoc).
The &lt;code&gt;getIndexVersion()&lt;/code&gt; method remains intact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A notion of &lt;em&gt;equivalence&lt;/em&gt; of Jandex objects was added.
This is useful when building more advanced layers on top of Jandex that deal with annotation overlays and similar things.
If you&amp;#8217;re interested, see the &lt;code&gt;EquivalenceKey&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The methods on &lt;code&gt;IndexView&lt;/code&gt; that accept a class name as a &lt;code&gt;DotName&lt;/code&gt; now have more convenient overloads that accept a &lt;code&gt;String&lt;/code&gt; and even &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt;.
If you search the index for classes that you have on your classpath, using these new methods can simplify your code.
For example, instead of &lt;code&gt;index.getClassByName(DotName.createSimple(MyClass.class.getName()))&lt;/code&gt;, you can call &lt;code&gt;index.getClassByName(MyClass.class)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The method &lt;code&gt;ClassInfo.isInterface()&lt;/code&gt; was added.
It can be used to determine whether given &lt;code&gt;ClassInfo&lt;/code&gt; actually represents an interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.memberClasses()&lt;/code&gt; was added, which returns a set of &lt;code&gt;DotName&lt;/code&gt;s of member classes of given class.
To inspect those member classes more deeply, you need to look them up in an &lt;code&gt;Index&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class &lt;code&gt;JandexReflection&lt;/code&gt; was added, containing some utility methods to load classes corresponding to Jandex &lt;code&gt;ClassInfo&lt;/code&gt; or &lt;code&gt;Type&lt;/code&gt;.
The classes are by default loaded from TCCL, but if there&amp;#8217;s none, the class loader that loaded &lt;code&gt;JandexReflection&lt;/code&gt; itself is used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 contains many interesting features and improvements.
This unfortunately required a few breaking changes.
Here&amp;#8217;s the recommended migration path:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Jandex 2.4.3.Final.
This release deprecates some of the methods that are changed in Jandex 3.0.0 and offers replacements.
Notably, this includes &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; (use &lt;code&gt;annotationsMap()&lt;/code&gt; instead) and &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; (use &lt;code&gt;parameterTypes()&lt;/code&gt; instead).
Make sure you don&amp;#8217;t use any deprecated Jandex methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure you don&amp;#8217;t use &lt;code&gt;Indexer.index()&lt;/code&gt;'s or &lt;code&gt;indexClass()&lt;/code&gt;'s return value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At this point, if you compile your code against Jandex 2.4.3.Final, it will most likely run just fine against both 2.4.3.Final and 3.0.0.
Exceptions include: if you implement &lt;code&gt;IndexView&lt;/code&gt; (there are new methods) or if you use the Jandex &lt;code&gt;Type&lt;/code&gt; hierarchy extensively (you&amp;#8217;ll need to handle &lt;code&gt;TypeVariableReference&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Jandex 3.0.0.
Configure Maven Enforcer plugin to ban &lt;code&gt;org.jboss:jandex&lt;/code&gt; from getting into your dependency tree.
With the exception of situations listed in the previous item, your code should compile and run without an issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profit!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, Jandex also has a new &lt;a href=&quot;https://smallrye.io/jandex/&quot;&gt;documentation site&lt;/a&gt;.
It is currently rather incomplete, but that will hopefully improve over time.
Jandex javadoc was also improved on many places, and remains the go-to reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any exciting ideas for Jandex, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 5.5</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-5/" rel="alternate" type="text/html" title="Fault Tolerance 5.5" /><published>2022-07-11T08:00:00+00:00</published><updated>2022-07-11T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-5</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-5/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.5.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.5.0.
This release includes one new feature: support for Micrometer.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.4.x, but note that transitive dependencies have changed a little.
See below for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance has always supported MicroProfile Metrics.
In this version, we add support for Micrometer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of metrics emitted to Micrometer is the same as the set of metrics emitted to MicroProfile Metrics, using the same metric names and tags.
Metric types are also mapped as closely as possible.
More information about that can be found in the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/usage/basic.html#_metrics&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for Micrometer is added mainly for Quarkus, which strives to replace MicroProfile Metrics with Micrometer.
Note that Quarkus does its own integration of SmallRye Fault Tolerance.
The CDI Portable Extension present in SmallRye Fault Tolerance, which other integrators use, still assumes usage of MicroProfile Metrics, and does the integration accordingly.
That is, if you integrate SmallRye Fault Tolerance and are fine with using MicroProfile Metrics, you don&amp;#8217;t have to do anything (except managing dependencies correctly, see below).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information about metrics integration is available in the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/integration/metrics.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;transitive_dependencies&quot;&gt;Transitive dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that in previous versions, depending on SmallRye Fault Tolerance brought in the MicroProfile Metrics API artifact, &lt;code&gt;org.eclipse.microprofile.metrics:microprofile-metrics-api&lt;/code&gt;, transitively.
With the addition of Micrometer support, this is no longer true.
Depending on SmallRye Fault Tolerance 5.5 no longer brings in any metrics dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency management has always been a responsibility of integrators.
They now have to make sure the correct metrics API dependency is present, which should typically be rather straightforward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.4.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.4.1" /><published>2022-06-28T17:00:00+00:00</published><updated>2022-06-28T17:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.1.
This is a small release with a few improvements.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment-time discovery of methods annotated with &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; was fixed.
This doesn&amp;#8217;t change runtime behavior, because guarded methods that were not discovered during deployment are registered lazily at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some trace-level logging messages were promoted to the debug level, and were enhanced with a description of the guarded method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purpose of upcoming Quarkus dev UI for SmallRye Fault Tolerance, the entire &lt;em&gt;effective&lt;/em&gt; fault tolerance configuration is now visible from outside.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some internal build-related improvements were also made.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4/" rel="alternate" type="text/html" title="Fault Tolerance 5.4" /><published>2022-03-31T10:00:00+00:00</published><updated>2022-03-31T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.0.
This release includes several new features and fixes related to the programmatic API.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reusable_preconfigured_fault_tolerance_strategies&quot;&gt;Reusable, preconfigured fault tolerance strategies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 5.3.0, we &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;introduced&lt;/a&gt; the programmatic API.
In this release, we augment that with a declarative way of applying programmatically created fault tolerance!
This allows centralizing fault tolerance configuration, as well as sharing fault tolerance state, all in a nice declarative fashion consistent with MicroProfile Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s demonstrate it with an example.
First, you have to create a bean of type &lt;code&gt;FaultTolerance&lt;/code&gt; with an &lt;code&gt;@Identifier&lt;/code&gt; qualifier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class PreconfiguredFaultTolerance {
    @Produces
    @Identifier(&quot;my-fault-tolerance&quot;)
    public static final FaultTolerance&amp;lt;String&amp;gt; FT = FaultTolerance.&amp;lt;String&amp;gt;create()
            .withRetry().maxRetries(2).done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is customary to create the bean by declaring a &lt;code&gt;static&lt;/code&gt; producer field, which is what we&amp;#8217;ve done here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have that, we can apply &lt;code&gt;my-fault-tolerance&lt;/code&gt; to synchronous methods that return &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @ApplyFaultTolerance(&quot;my-fault-tolerance&quot;)
    public String doSomething() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/usage/extra.html#_reusable_preconfigured_fault_tolerance&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exception_decisions_in_programmatic_api&quot;&gt;Exception decisions in programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The circuit breaker, fallback, and retry fault tolerance strategies allow configuring what happens on certain exceptions.
Both the declarative and programmatic API allow configuring a set of exception classes that are considered expected and unexpected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, the programmatic API also lets you supply a simple exception predicate, which allows expressing more complex exception decisions.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;Callable&amp;lt;String&amp;gt; guarded = FaultTolerance.createCallable(this::action)
        .withFallback().handler(this::fallback).when(e -&amp;gt; e instanceof RuntimeException).done()
        .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the value of this approach is that the predicate may be more complex than a simple &lt;code&gt;instanceof&lt;/code&gt; check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;support_for_kotlin_suspending_functions&quot;&gt;Support for Kotlin suspending functions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance already supports some asynchronous types on top of the &lt;code&gt;CompletionStage&lt;/code&gt; type mandated by the MicroProfile Fault Tolerance specification.
Specifically, there&amp;#8217;s support for Mutiny and RxJava 3 and more could easily be added if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, a new module &lt;code&gt;smallrye-fault-tolerance-kotlin&lt;/code&gt; is added that provides support for Kotlin &lt;code&gt;suspend&lt;/code&gt; functions.
They are also considered asynchronous, so fault tolerance applies across suspension points, like you&amp;#8217;d expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
open class MyService {
    @Retry(maxRetries = 2)
    @Fallback(fallbackMethod = &quot;helloFallback&quot;)
    open suspend fun hello(): String {
        delay(100)
        throw IllegalArgumentException()
    }

    private suspend fun helloFallback(): String {
        delay(100)
        return &quot;hello&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SmallRye Fault Tolerance documentation of the programmatic API recommends to store &lt;code&gt;FaultTolerance&lt;/code&gt; instances into &lt;code&gt;static&lt;/code&gt; fields.
This has some interesting implications.
Specifically, the entire fault tolerance chain is built in the static initializer, and that includes looking up several beans from the CDI container and possibly even creating a thread.
That is problematic in Quarkus when compiling to a native image, because static initialization code is executed during native image build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, this problem is fixed.
Almost all of the initialization is deferred to runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all, upgrading to 5.4.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;re still very much interested in any feedback on the programmatic API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>