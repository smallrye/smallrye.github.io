<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2023-07-25T16:40:45+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 6.2.6</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-6/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.6" /><published>2023-07-25T12:00:00+00:00</published><updated>2023-07-25T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-6</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.6&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.6.
This is a tiny release with one fix for Maven users that enable strict checksum validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance uses Arquillian to run the MicroProfile Fault Tolerance TCK.
To do that, it imports the Arquillian BOM for managing dependency versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Arquillian 1.7.0 has unfortunately made a mistake in deploying checksums to Maven Central, and since SmallRye Fault Tolerance imports the Arquillian BOM in its &lt;em&gt;root&lt;/em&gt; POM, all Maven users that enable strict checksum validation and depend on SmallRye Fault Tolerance directly or transitively will observe checksum validation failures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the problem is fixed by no longer importing the Arquillian BOM in the root POM; instead, all the Arquillian dependency versions are managed by the TCK module.
The TCK module is not something people can depend on; for a while, we haven&amp;#8217;t even been releasing its binary to Maven Central.
Therefore, the scope of checksum validation failures is greatly reduced&amp;#8201;&amp;#8212;&amp;#8201;they can only happen in the SmallRye Fault Tolerance project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small fix for the circuit breaker state diagram in the documentation is also included.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.2.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-4/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.4" /><published>2023-06-21T12:00:00+00:00</published><updated>2023-06-21T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.4&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.4.
This is a tiny release with one bugfix for Micrometer integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a gauge is registered with Micrometer, a &lt;em&gt;state object&lt;/em&gt; is passed to Micrometer along with a &lt;em&gt;value extraction function&lt;/em&gt;.
That value extraction function is supposed to extract the actual gauge value from the state object.
In SmallRye Fault Tolerance, the state object is a &lt;code&gt;Supplier&lt;/code&gt; and the value extraction function just calls the &lt;code&gt;get&lt;/code&gt; method on the &lt;code&gt;Supplier&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issue is that Micrometer only holds onto the state object weakly (using &lt;code&gt;WeakReference&lt;/code&gt;).
If the state object is GC-ed, Micrometer will report &lt;code&gt;NaN&lt;/code&gt; as the gauge value.
Since the &lt;code&gt;Supplier&lt;/code&gt; in SmallRye Fault Tolerance is not used anywhere else, gauges typically don&amp;#8217;t report the proper value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, we make sure that the &lt;code&gt;Supplier&lt;/code&gt;s do not become garbage, so gauges work correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, a test for fault tolerance on interface-based beans was simplified, together with the implementation of RestClient interface-based beans in RESTEasy MicroProfile (which is what this test mimics).
Thanks Matěj Novotný for the PR!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.2</title><link href="https://www.smallrye.io/blog/jandex-3-1-2/" rel="alternate" type="text/html" title="Jandex 3.1.2" /><published>2023-06-08T14:00:00+00:00</published><updated>2023-06-08T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.2&quot;&gt;release&lt;/a&gt; of Jandex 3.1.2.
It includes a significant internal refactoring of method parameter names and synthetic parameters handling, as well as one small API improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JDK 18 and JDK 21 made some changes in &lt;code&gt;javac&lt;/code&gt; that required refactoring of how synthetic/mandated parameters and parameters names are handled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8271623&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8271623&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8292275&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, method parameter handling is more robust.
Thanks Christian Beikov for the bug report and reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo&lt;/code&gt; class now exposes the &lt;code&gt;isDefault()&lt;/code&gt; and &lt;code&gt;isBridge()&lt;/code&gt; methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isDefault()&lt;/code&gt; returns whether the method is a &lt;code&gt;default&lt;/code&gt; method declared on an interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isBridge()&lt;/code&gt; returns whether the method is a synthetic bridge method&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks Martin Kouba for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.2.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-3/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.3" /><published>2023-05-26T12:00:00+00:00</published><updated>2023-05-26T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.3&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.3.
This is a tiny release with one bugfix for Kotlin users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Fallback&lt;/code&gt; annotation allows specifying 2 kinds of fallbacks: fallback methods and fallback handlers.
Fallback method, as defined by MicroProfile Fault Tolerance, must have the same parameters as the guarded method.
SmallRye Fault Tolerance has an improvement: the fallback method may declare an additional parameter of an exception type, which must be present at the very end of the parameter list.
This doesn&amp;#8217;t work correctly for Kotlin &lt;code&gt;suspend&lt;/code&gt; functions, because &lt;code&gt;suspend&lt;/code&gt; functions always have a &lt;code&gt;Continuation&lt;/code&gt; parameter at the end of the parameter list.
Therefore, a fallback method with an additional exception parameter, which is also a Kotlin &lt;code&gt;suspend&lt;/code&gt; function, isn&amp;#8217;t found correctly.
This release fixes the bug and &lt;code&gt;suspend&lt;/code&gt; functions may be used as fallback methods just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, with this release, we made a small reordering of sections in the reference guides.
The section on interactions with other strategies is now always present right after the description section, so that it&amp;#8217;s more visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.1</title><link href="https://www.smallrye.io/blog/jandex-3-1-1/" rel="alternate" type="text/html" title="Jandex 3.1.1" /><published>2023-04-13T09:00:00+00:00</published><updated>2023-04-13T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.1&quot;&gt;release&lt;/a&gt; of Jandex 3.1.1.
It includes one small improvement and one small bug fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of the effort to make creating instances of &lt;code&gt;Type&lt;/code&gt; easier for Jandex users, this release makes the &lt;code&gt;VoidType.VOID&lt;/code&gt; constant &lt;code&gt;public&lt;/code&gt;.
To obtain an instance of &lt;code&gt;VoidType&lt;/code&gt;, it is no longer necessary to use &lt;code&gt;Type.create()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previous release attempted to make the indexing process reproducible, but didn&amp;#8217;t succeed entirely.
In case an indexed class contains a recursive type parameter, which is relatively common, indexing in fact wasn&amp;#8217;t reproducible due to the unnecessary usage of &lt;code&gt;System.identityHashCode()&lt;/code&gt;.
This release fixes that.
Thanks Alexey Loubyansky for providing a reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.0</title><link href="https://www.smallrye.io/blog/jandex-3-1-0/" rel="alternate" type="text/html" title="Jandex 3.1.0" /><published>2023-04-06T14:00:00+00:00</published><updated>2023-04-06T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.0&quot;&gt;release&lt;/a&gt; of Jandex 3.1.0.
It includes several improvements and bug fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;declarations&quot;&gt;Declarations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The top-level interface in the Jandex object model has always been an &lt;code&gt;AnnotationTarget&lt;/code&gt;: something that can be annotated.
There are generally two kinds of things that can be annotated, speaking in Java terms: declarations and types (or type usages, to be more precise).
This distinction hasn&amp;#8217;t been reflected in the Jandex object model hierarchy, until now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1 adds the &lt;code&gt;Declaration&lt;/code&gt; interface, which directly extends &lt;code&gt;AnnotationTarget&lt;/code&gt;.
All classes that represent declarations now implement &lt;code&gt;Declaration&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FieldInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MethodInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MethodParameterInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RecordComponentInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only &lt;code&gt;AnnotationTarget&lt;/code&gt; that isn&amp;#8217;t &lt;code&gt;Declaration&lt;/code&gt; is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeTarget&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;EquivalenceKey&lt;/code&gt; hierarchy also has a &lt;code&gt;DeclarationEquivalenceKey&lt;/code&gt;, so that it corresponds to the &lt;code&gt;AnnotationTarget&lt;/code&gt; hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a small change that should significantly improve usage of Jandex as a language model.
It is very common to only care about annotated declarations, but for now, there hasn&amp;#8217;t been a way to distinguish them from annotated type usages.
The &lt;code&gt;Declaration&lt;/code&gt; interface serves this very purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;factories_and_builders_for_types&quot;&gt;Factories and builders for types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are different ways to instantiate a Jandex &lt;code&gt;Type&lt;/code&gt;.
The &lt;code&gt;Type.create()&lt;/code&gt; static method is not very easy to use, and the concrete subclasses of &lt;code&gt;Type&lt;/code&gt; over time accumulated different static factory methods as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1 adds a comprehensive set of static factory methods and builders to all complex &lt;code&gt;Type&lt;/code&gt;s:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ParameterizedType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WildcardType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All these classes have a set of static factory methods called &lt;code&gt;create()&lt;/code&gt;, sufficient for the most common cases.
They also have a static method called &lt;code&gt;builder()&lt;/code&gt; that returns a builder, usable for the less common cases, including type annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;array_types_representation&quot;&gt;Array types representation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ArrayType&lt;/code&gt; class in Jandex models Java array types.
The Jandex representation, incidentally, is very different from the Java language representation, yet has always used the same terminology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quick refresher: in Java, array types have a component type and an element type.
For example, in case of &lt;code&gt;int[][]&lt;/code&gt;, the element type is &lt;code&gt;int&lt;/code&gt;, while the component type is &lt;code&gt;int[]&lt;/code&gt; (whose component type is &lt;code&gt;int&lt;/code&gt;).
In Jandex, &lt;code&gt;int[][]&lt;/code&gt; has always been represented as a tuple: &lt;code&gt;{ componentType = int, dimensions = 2 }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows the first issue: conflicting terminology.
The term &lt;em&gt;component type&lt;/em&gt; in Jandex has always meant something else than in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not everything, though.
To faithfully represent type annotations on the dimensions of the array, Jandex sometimes has to use an array type as the component type of an array type.
For example, the type &lt;code&gt;String[] @Ann []&lt;/code&gt; has to be represented as an array with 1 dimension, whose component type is an array type &lt;code&gt;String @Ann []&lt;/code&gt;.
The component type of that, in turn, is &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, this is completely different from the Java representation.
This is usually not a big deal, because annotations on array dimensions are rare and multi-dimensional arrays are significantly less common than single-dimensional, but it still causes confusion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the release of Jandex 3.1, this is no more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What Jandex used to call &lt;em&gt;component type&lt;/em&gt; of an array is now named &lt;em&gt;constituent type&lt;/em&gt;.
To access the Jandex representation, the following methods exist:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;constituent()&lt;/code&gt;: this method is new&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dimensions()&lt;/code&gt;: this method has existed before and hasn&amp;#8217;t been changed to avoid breaking compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Methods to access the Java representation of array types are added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;elementType()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;componentType()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;deepDimensions()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One method has been deprecated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component()&lt;/code&gt;: this method has existed before and hasn&amp;#8217;t been changed to avoid breaking compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reconstructing_descriptors_and_generic_signatures&quot;&gt;Reconstructing descriptors and generic signatures&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Advanced users of Jandex, such as Quarkus, sometimes have to reconstruct a descriptor or a generic signature of some Jandex object.
In this release, Jandex has this functionality built-in, accessible through two interfaces: &lt;code&gt;Descriptor&lt;/code&gt; and &lt;code&gt;GenericSignature&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex classes that implement the &lt;code&gt;Descriptor&lt;/code&gt; interface are able to reconstruct their bytecode descriptor.
Similarly, Jandex classes that implement the &lt;code&gt;GenericSignature&lt;/code&gt; interface are able to reconstruct their generic signature and also return whether a generic signature is actually required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both descriptor and signature reconstruction can optionally perform type variable substitution.
That is, if a type variable occurs when reconstructing the descriptor, the corresponding part of the descriptor may instead describe another type returned by a given substitution function (same for signatures).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, Jandex used to fail when invalid generic signature occured in the indexed bytecode.
It turns out that ECJ may produce invalid generic signature on pretty basic code (synthetic static method generated for a lambda), so with Jandex 3.1, invalid signatures are simply ignored.
Thanks Hélios Gilles for providing a reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With great help from Francesco Nigro, a lot of performance improvements to the indexing process were made.
On large JARs, we&amp;#8217;ve seen roughly 20% improvements in indexing speed and 50% improvements in allocation rate.
Thank you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, Brian Demers and Guillaume Nodet provided fixes for build reproducibility.
(Note that this is not an intentionally supported feature and it&amp;#8217;s only maintained on a best effort basis.)
Thanks!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release brings a lot of changes, but none of them break backward compatibility.
The persistent format of Jandex has not changed either, so upgrade should be safe for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.2.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-2/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.2" /><published>2023-04-06T10:00:00+00:00</published><updated>2023-04-06T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.2&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.2.
This is a tiny release with one bugfix for programmatic API usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 2 variants of the SmallRye Fault Tolerance programmatic API: &lt;em&gt;standalone&lt;/em&gt; and &lt;em&gt;CDI&lt;/em&gt;.
At runtime, only one of them should typically be present, but if there are both, a priority mechanism exists to disambiguate.
This priority mechanism had a bug which could lead to incorrect variant being selected.
The bug is now fixed and the programmatic API should work as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.2.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.1" /><published>2023-03-03T10:00:00+00:00</published><updated>2023-03-03T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.1.
This is a small release with one tiny feature useful for application server integrators.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance has included support for Micrometer since &lt;a href=&quot;/blog/fault-tolerance-5-5/&quot;&gt;version 5.5&lt;/a&gt;, but integrators had to fiddle with type discovery to get it working.
In this release, for integrators that use the CDI Portable Extension present in SmallRye Fault Tolerance, we provide a direct way to select which metrics integration should be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultToleranceExtension&lt;/code&gt; class now has an additional constructor that takes a &lt;code&gt;MetricsIntegration&lt;/code&gt; parameter.
The &lt;code&gt;MetricsIntegration&lt;/code&gt; is an enum with these values:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MICROPROFILE_METRICS&lt;/code&gt;: use MicroProfile Metrics integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MICROMETER&lt;/code&gt;: use Micrometer integration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NOOP&lt;/code&gt;: no metrics&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since this is a constructor parameter, it is only useful for integrators that instantiate the Portable Extension themselves.
If the integrator relies on the CDI container to discover and instantiate Portable Extensions, this mechanism is useless and they still need to alter the set of discovered types when they want a different metrics integration.
We&amp;#8217;d like to provide a different mechanism in the future, though it is not clear how that could look like.
If you have any ideas, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.2.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.0" /><published>2023-02-10T13:00:00+00:00</published><updated>2023-02-10T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described in &lt;a href=&quot;/blog/fault-tolerance-6-0-0/&quot;&gt;the previous announcement&lt;/a&gt;, this release marks the end of life of SmallRye Fault Tolerance 5.
There will be no more releases in the 5.x stream.
This also means there will be no more Java 8 support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also upgrades to the Jakarta EE 10 dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;documentation&quot;&gt;Documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, the documentation contained numerous references to the MicroProfile Fault Tolerance specification, and all SmallRye Fault Tolerance improvements on top of the specification were described in a single, long, hard to read document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 6.2.0, the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.2.0/&quot;&gt;documentation&lt;/a&gt; has been thoroughly restructured and revised.
It should contain all the necessary information, so that you no longer have to refer to the specification for pretty basic stuff.
The improvements on top of the specification are now placed in the same guide that describes the basic feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Overall, the documentation now contains more information and yet should be much easier to navigate and read.
It is divided into 2 major sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How-to Guides: task-oriented guides that let you quickly start using some feature.
They provide a short overview, but not many details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;References: detailed guides that let you understand some feature in depth.
They also provide information about more advanced options or features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are 2 other sections (Integration, Internals), but those are not terribly useful for application developers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;circuit_breaker_state_metric&quot;&gt;Circuit breaker state metric&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also adds one small feature: current state of circuit breakers is now exposed through metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new metric called &lt;code&gt;ft.circuitbreaker.state.current&lt;/code&gt; is added.
It has the following tags:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;method&lt;/code&gt;: the fully qualified method name, like in all other fault tolerance metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;state&lt;/code&gt; = &lt;code&gt;[open|closed|halfOpen]&lt;/code&gt;: the circuit breaker state&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This metric is a gauge with a value of &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.
The value of &lt;code&gt;1&lt;/code&gt; means that the circuit breaker currently &lt;em&gt;is&lt;/em&gt; in given state, while &lt;code&gt;0&lt;/code&gt; means that it is not.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.0.5</title><link href="https://www.smallrye.io/blog/jandex-3-0-5/" rel="alternate" type="text/html" title="Jandex 3.0.5" /><published>2022-12-02T14:00:00+00:00</published><updated>2022-12-02T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-5</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-5/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.0.5&quot;&gt;release&lt;/a&gt; of Jandex 3.0.5.
It includes one bug fix and a few javadoc improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release fixes a bug in index post-processing.
When &lt;code&gt;Indexer.complete()&lt;/code&gt; is called, Jandex does some post-processing that can&amp;#8217;t happen when individual classes are indexed.
This makes sure type annotations are correctly propagated across nested classes.
To propagate type annotations from enclosing classes to enclosed classes, they must be processed in certain order.
That order is &lt;a href=&quot;https://en.wikipedia.org/wiki/Partially_ordered_set&quot;&gt;partial&lt;/a&gt;, because we don&amp;#8217;t really care about processing order between classes that are not enclosed in one another.
However, Jandex used to use the JDK method for sorting the collection of classes, and that requires establishing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Total_order&quot;&gt;total&lt;/a&gt; order.
Alas, the &lt;code&gt;Comparator&lt;/code&gt; that Jandex used to use did &lt;em&gt;not&lt;/em&gt; establish a total order.
In other words, it was written incorrectly, which sometimes manifested as the [in]famous &lt;code&gt;Comparison method violates its general contract!&lt;/code&gt; exception.
The &lt;code&gt;Comparator&lt;/code&gt; is fixed in this release.
Thanks Matthias Villiger for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, javadoc for some methods was improved, especially for &lt;code&gt;Type.name()&lt;/code&gt;.
This is a good reminder for all Jandex users out there: if you use &lt;code&gt;Type.toString()&lt;/code&gt; to obtain a class name, please don&amp;#8217;t!
Use &lt;code&gt;Type.name()&lt;/code&gt; instead.
&lt;code&gt;Type.toString()&lt;/code&gt; is a human-readable representation of the type and should only be used for constructing human-readable messages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry></feed>