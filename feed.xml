<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2024-10-29T11:44:58+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 6.6.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.1" /><published>2024-10-29T10:00:00+00:00</published><updated>2024-10-29T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.1.
This release contains one small bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CDI extension in SmallRye Fault Tolerance (&lt;code&gt;FaultToleranceExtension&lt;/code&gt;) was changed in SmallRye Fault Tolerance 6.5.0 to support multiple metric providers at the same time.
This support wasn&amp;#8217;t functioning properly in case the metrics classes for given provider were present, but the dependencies on required beans were not satisfied.
In this release, all the metric providers now depend on the required beans lazily (by injecting &lt;code&gt;Provider&lt;/code&gt; of given class, instead of the class directly).
This, together with some refactoring from field injection to constructor injection for simplification, fixes the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.6.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.0" /><published>2024-10-24T14:00:00+00:00</published><updated>2024-10-24T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.0.
This release contains two small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, all &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; methods that used the same identifier were collapsed into the same metrics, using the &lt;code&gt;FaultTolerance&lt;/code&gt; description as the &lt;code&gt;method&lt;/code&gt; tag.
With this release, &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; methods have split metrics, where the &lt;code&gt;method&lt;/code&gt; tag is the classic &lt;code&gt;&amp;lt;fully qualified class name&amp;gt;.&amp;lt;method name&amp;gt;&lt;/code&gt; format, even though they still share the same &lt;code&gt;FaultTolerance&lt;/code&gt; object and therefore the bulkhead / circuit breaker / rate limit state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance.BulkheadBuilder.enableVirtualThreadsQueueing()&lt;/code&gt; method was added.
With this method, it is possible to use bulkhead queueing even with synchronous bulkhead, but there&amp;#8217;s an important limitation: the &lt;code&gt;FaultTolerance&lt;/code&gt; guard must be executed on virtual threads.
This is not checked; it is something you have to provide yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.3</title><link href="https://www.smallrye.io/blog/jandex-3-2-3/" rel="alternate" type="text/html" title="Jandex 3.2.3" /><published>2024-10-24T13:00:00+00:00</published><updated>2024-10-24T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-3</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.3&quot;&gt;release&lt;/a&gt; of Jandex 3.2.3.
This release contains one small bugfix and one small improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Type.parse()&lt;/code&gt; method was added.
This method parses a string (according to a documented grammar) and produces a Jandex &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Index.singleClass()&lt;/code&gt; method now works properly when the passed class object in fact represents a module descriptor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.5.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-5-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.5.0" /><published>2024-10-11T11:00:00+00:00</published><updated>2024-10-11T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-5-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-5-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.5.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.5.0.
This release implements MicroProfile Fault Tolerance 4.1 and contains several new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only new feature of MicroProfile Fault Tolerance 4.1 is support for OpenTelemetry / MicroProfile Telemetry, specifically for exposing metrics.
Since SmallRye Fault Tolerance has already included support for MicroProfile Metrics and Micrometer, adding a third implementation was a no-brainer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, SmallRye Fault Tolerance 6.5.0 resolves fallback methods (&lt;code&gt;@Fallback.fallbackMethod()&lt;/code&gt;) and before-retry methods (&lt;code&gt;@BeforeRetry.methodName()&lt;/code&gt;) statically.
That is, instead of resolving the methods when the fault tolerance operation is being constructed, the methods are resolved during deployment.
This makes no difference in regular environments like WildFly, but in Quarkus, where deployment happens at build time, this is a significant change.
It allows proper native image compilation, and it is also a breaking change on the configuration front.
The configuration of fallback methods and before-retry methods is now build-time only, and cannot be changed at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in this version, the &lt;code&gt;FaultTolerance.cast()&lt;/code&gt; and &lt;code&gt;castAsync()&lt;/code&gt; methods were added.
These methods return the same instance of &lt;code&gt;FaultTolerance&lt;/code&gt;, but casted to guard a different type.
This is often safe, but cannot happen when fallback is defined; in that case, these methods throw an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.4.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.4.1" /><published>2024-09-27T14:00:00+00:00</published><updated>2024-09-27T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-4-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.4.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.4.1.
This release contains two bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 6.3.0, the &lt;code&gt;ThreadTimer&lt;/code&gt; internal class was made a singleton.
That was a mistake, because that prevents 2 deployments using SmallRye Fault Tolerance in the same application server (such as WildFly).
The second deployment would get an &lt;code&gt;IllegalStateException&lt;/code&gt; with the message of &lt;em&gt;Timer already exists&lt;/em&gt;.
The mistake was fixed and there can be multiple instances of the timer once again.
The instances of the timer are distinguished by an opaque identifier, which is also exposed via metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the search for fallback methods (&lt;code&gt;@Fallback.fallbackMethod()&lt;/code&gt;), as well as before-retry methods (&lt;code&gt;@BeforeRetry.methodName()&lt;/code&gt;), was fixed to also include methods from inherited interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.2</title><link href="https://www.smallrye.io/blog/jandex-3-2-2/" rel="alternate" type="text/html" title="Jandex 3.2.2" /><published>2024-08-08T13:00:00+00:00</published><updated>2024-08-08T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.2&quot;&gt;release&lt;/a&gt; of Jandex 3.2.2.
This release contains several small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.canonicalRecordConstructor()&lt;/code&gt; method was added.
This method returns a canonical constructor for records as a &lt;code&gt;MethodInfo&lt;/code&gt;.
For other kinds of classes, it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the &lt;code&gt;ClassInfo.unsorted*&lt;/code&gt; methods were renamed, because the old name is not exactly intuitive.
The old methods still exist, but are deprecated.
The new methods are:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Old method&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedFields()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fieldsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedMethods()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;methodsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedRecordComponents()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;recordComponentsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The javadoc of the &lt;code&gt;fields()&lt;/code&gt;, &lt;code&gt;methods()&lt;/code&gt; and &lt;code&gt;recordComponents()&lt;/code&gt; methods was improved to point out that there is no guaranteed order in their return values.
There is also a link to the &lt;code&gt;*InDeclarationOrder()&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.1</title><link href="https://www.smallrye.io/blog/jandex-3-2-1/" rel="alternate" type="text/html" title="Jandex 3.2.1" /><published>2024-07-29T09:00:00+00:00</published><updated>2024-07-29T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.1&quot;&gt;release&lt;/a&gt; of Jandex 3.2.1.
This release contains several small improvements and bug fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All annotations in the annotation overlay (introduced in &lt;a href=&quot;/blog/jandex-3-2-0&quot;&gt;Jandex 3.2.0&lt;/a&gt;) are now guaranteed to have a target.
This was previously not the case for annotations added by the user, but with this release, all annotations added by the user that don&amp;#8217;t have a target yet are assigned a target automatically.
Also, the &lt;code&gt;AnnotationOverlay&lt;/code&gt; javadoc was improved slightly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo&lt;/code&gt; class will no longer hold an empty or single-element &lt;code&gt;HashMap&lt;/code&gt;.
Instead, a &lt;code&gt;Collections.emptyMap()&lt;/code&gt; or &lt;code&gt;Collections.singletonMap()&lt;/code&gt; are used, making Jandex memory consumption better.
Thanks Guillaume Smet for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jandex-jar&lt;/code&gt; goal of the Jandex Maven plugin has gained an &lt;code&gt;indexVersion&lt;/code&gt; parameter.
This parameter was already present on the &lt;code&gt;jandex&lt;/code&gt; goal, so this increases feature parity.
Thanks Martin Hickson for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.4.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-4-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.4.0" /><published>2024-07-22T09:00:00+00:00</published><updated>2024-07-22T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-4-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-4-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.4.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.4.0.
This release contains one new feature and one bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@BeforeRetry&lt;/code&gt; annotation was added, together with the corresponding methods in the programmatic API.
The annotation allows defining an action that should happen before each retry, but not before the initial attempt.
See the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.4.0/reference/retry.html#_before_retry_actions&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the &lt;code&gt;synchronized&lt;/code&gt; keyword was replaced on one place with a &lt;code&gt;ReentrantLock&lt;/code&gt;, making the programmatic API more friendly with virtual threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.0</title><link href="https://www.smallrye.io/blog/jandex-3-2-0/" rel="alternate" type="text/html" title="Jandex 3.2.0" /><published>2024-05-16T12:00:00+00:00</published><updated>2024-05-16T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.0&quot;&gt;release&lt;/a&gt; of Jandex 3.2.0.
This release contains a number of improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; This Jandex version increases the persistent format version.
Therefore, persistent indexes produced by this version will &lt;em&gt;not&lt;/em&gt; be readable by previous Jandex releases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;annotation_overlay&quot;&gt;Annotation overlay&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An &lt;em&gt;annotation overlay&lt;/em&gt; was added to Jandex.
This is a layer on top of core Jandex that allows overriding annotations.
This is useful when Jandex is used as a language model and annotations are used directly as framework metadata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In fact, there are &lt;em&gt;two&lt;/em&gt; annotation overlays: a default &lt;code&gt;AnnotationOverlay&lt;/code&gt;, which is immutable, and a &lt;code&gt;MutableAnnotationOverlay&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The default annotation overlay accepts an &lt;code&gt;IndexView&lt;/code&gt; and a collection of &lt;code&gt;AnnotationTransformation&lt;/code&gt;s.
These transformations are applied lazily, whenever the annotation overlay is first asked for annotation information of any particular declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The mutable annotation overlay only accepts an &lt;code&gt;IndexView&lt;/code&gt; and annotations may be added and removed freely, until the overlay is &lt;em&gt;frozen&lt;/em&gt;.
When it&amp;#8217;s frozen, a list of annotation transformations is returned so that a corresponding immutable annotation overlay may be constructed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In case you&amp;#8217;re familiar with the &lt;code&gt;AnnotationStore&lt;/code&gt; from from ArC or from RESTEasy Reactive, this is the very same concept, but the implementation is improved.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_improvements&quot;&gt;Other improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for &lt;em&gt;sealed classes&lt;/em&gt; was added.
This includes two methods: &lt;code&gt;ClassInfo.isSealed()&lt;/code&gt; and &lt;code&gt;ClassInfo.permittedSubclasses()&lt;/code&gt;.
If a class is declared &lt;code&gt;sealed&lt;/code&gt;, the &lt;code&gt;isSealed()&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;permittedSubclasses()&lt;/code&gt; method returns the names of permitted subclasses.
To inspect them further, they must be looked up from the index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together with this, the &lt;code&gt;ClassInfo.isFinal()&lt;/code&gt; and &lt;code&gt;ClassInfo.isAbstract()&lt;/code&gt; methods were also added, as a shortcut for the corresponding &lt;code&gt;Modifier&lt;/code&gt; methods called on &lt;code&gt;ClassInfo.flags()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An empty index (&lt;code&gt;EmptyIndex.INSTANCE&lt;/code&gt; or &lt;code&gt;IndexView.empty()&lt;/code&gt;) was added.
This is a very lightweight implementation of the &lt;code&gt;IndexView&lt;/code&gt; interface that always returns &lt;code&gt;null&lt;/code&gt; or an empty collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, a &lt;code&gt;StackedIndex&lt;/code&gt; was also added.
This is a new implementation of a composite index, which actually has well defined semantics in case the same class is present in the index multiple times (unlike &lt;code&gt;CompositeIndex&lt;/code&gt;, which didn&amp;#8217;t define this situation at all).
In a stacked index, if a class is seen in one of the indexes, it is completely ignored in other indexes &lt;em&gt;below&lt;/em&gt; the first one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The behavior of &lt;code&gt;Index.getKnownUsers()&lt;/code&gt; was improved.
Previously, this method only considered a class as a user of another class when a reference to the other class was listed in the  constant pool.
Since this Jandex version, a class is also considered as a user of another class when the other class is present in the signature of the class or any of its members.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the Jandex Maven plugin will not produce an index for a module with the POM packaging.
This is a tiny breaking change that shouldn&amp;#8217;t affect anyone, but in case it does, the &lt;code&gt;&amp;lt;skipForPomPackaging&amp;gt;&lt;/code&gt; configuration option may be set to &lt;code&gt;false&lt;/code&gt; to revert to the previous behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And last but not least, hash table collisions were significantly reduced when interning type variable references.
This should make indexing a lot faster in certain cases.
Thanks Patrick Reinhart for the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.8</title><link href="https://www.smallrye.io/blog/jandex-3-1-8/" rel="alternate" type="text/html" title="Jandex 3.1.8" /><published>2024-05-07T12:00:00+00:00</published><updated>2024-05-07T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-8</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-8/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.8&quot;&gt;release&lt;/a&gt; of Jandex 3.1.8.
This release contains two small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To locate a method from a &lt;code&gt;ClassInfo&lt;/code&gt;, one had to use the &lt;code&gt;ClassInfo.method(String, Type...)&lt;/code&gt; method.
With this release, one can also use &lt;code&gt;ClassInfo.method(String, List&amp;lt;Type&amp;gt;)&lt;/code&gt;.
Thanks Guillaume Smet for the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, in this release, the runtime memory consumption of Jandex was significantly improved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry></feed>