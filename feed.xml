<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2022-06-29T16:03:02+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 5.4.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.4.1" /><published>2022-06-28T17:00:00+00:00</published><updated>2022-06-28T17:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.1.
This is a small release with a few improvements.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment-time discovery of methods annotated with &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; was fixed.
This doesn&amp;#8217;t change runtime behavior, because guarded methods that were not discovered during deployment are registered lazily at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some trace-level logging messages were promoted to the debug level, and were enhanced with a description of the guarded method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purpose of upcoming Quarkus dev UI for SmallRye Fault Tolerance, the entire &lt;em&gt;effective&lt;/em&gt; fault tolerance configuration is now visible from outside.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some internal build-related improvements were also made.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4/" rel="alternate" type="text/html" title="Fault Tolerance 5.4" /><published>2022-03-31T10:00:00+00:00</published><updated>2022-03-31T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.0.
This release includes several new features and fixes related to the programmatic API.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reusable_preconfigured_fault_tolerance_strategies&quot;&gt;Reusable, preconfigured fault tolerance strategies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 5.3.0, we &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;introduced&lt;/a&gt; the programmatic API.
In this release, we augment that with a declarative way of applying programmatically created fault tolerance!
This allows centralizing fault tolerance configuration, as well as sharing fault tolerance state, all in a nice declarative fashion consistent with MicroProfile Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s demonstrate it with an example.
First, you have to create a bean of type &lt;code&gt;FaultTolerance&lt;/code&gt; with an &lt;code&gt;@Identifier&lt;/code&gt; qualifier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class PreconfiguredFaultTolerance {
    @Produces
    @Identifier(&quot;my-fault-tolerance&quot;)
    public static final FaultTolerance&amp;lt;String&amp;gt; FT = FaultTolerance.&amp;lt;String&amp;gt;create()
            .withRetry().maxRetries(2).done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is customary to create the bean by declaring a &lt;code&gt;static&lt;/code&gt; producer field, which is what we&amp;#8217;ve done here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have that, we can apply &lt;code&gt;my-fault-tolerance&lt;/code&gt; to synchronous methods that return &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @ApplyFaultTolerance(&quot;my-fault-tolerance&quot;)
    public String doSomething() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/usage/extra.html#_reusable_preconfigured_fault_tolerance&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exception_decisions_in_programmatic_api&quot;&gt;Exception decisions in programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The circuit breaker, fallback, and retry fault tolerance strategies allow configuring what happens on certain exceptions.
Both the declarative and programmatic API allow configuring a set of exception classes that are considered expected and unexpected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, the programmatic API also lets you supply a simple exception predicate, which allows expressing more complex exception decisions.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;Callable&amp;lt;String&amp;gt; guarded = FaultTolerance.createCallable(this::action)
        .withFallback().handler(this::fallback).when(e -&amp;gt; e instanceof RuntimeException).done()
        .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the value of this approach is that the predicate may be more complex than a simple &lt;code&gt;instanceof&lt;/code&gt; check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;support_for_kotlin_suspending_functions&quot;&gt;Support for Kotlin suspending functions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance already supports some asynchronous types on top of the &lt;code&gt;CompletionStage&lt;/code&gt; type mandated by the MicroProfile Fault Tolerance specification.
Specifically, there&amp;#8217;s support for Mutiny and RxJava 3 and more could easily be added if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, a new module &lt;code&gt;smallrye-fault-tolerance-kotlin&lt;/code&gt; is added that provides support for Kotlin &lt;code&gt;suspend&lt;/code&gt; functions.
They are also considered asynchronous, so fault tolerance applies across suspension points, like you&amp;#8217;d expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
open class MyService {
    @Retry(maxRetries = 2)
    @Fallback(fallbackMethod = &quot;helloFallback&quot;)
    open suspend fun hello(): String {
        delay(100)
        throw IllegalArgumentException()
    }

    private suspend fun helloFallback(): String {
        delay(100)
        return &quot;hello&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SmallRye Fault Tolerance documentation of the programmatic API recommends to store &lt;code&gt;FaultTolerance&lt;/code&gt; instances into &lt;code&gt;static&lt;/code&gt; fields.
This has some interesting implications.
Specifically, the entire fault tolerance chain is built in the static initializer, and that includes looking up several beans from the CDI container and possibly even creating a thread.
That is problematic in Quarkus when compiling to a native image, because static initialization code is executed during native image build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, this problem is fixed.
Almost all of the initialization is deferred to runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all, upgrading to 5.4.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;re still very much interested in any feedback on the programmatic API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3-2/" rel="alternate" type="text/html" title="Fault Tolerance 5.3.2" /><published>2022-02-14T16:00:00+00:00</published><updated>2022-02-14T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.2&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.2.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;SmallRye Fault Tolerance 5.3&lt;/a&gt;, we revamped the support for additional async types.
During that refactoring, we introduced a bug that manifests in environments with security manager enabled.
In this release, the bug is fixed.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.3.1" /><published>2022-02-10T13:00:00+00:00</published><updated>2022-02-10T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.1.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;SmallRye Fault Tolerance 5.3&lt;/a&gt;, we revamped the support for additional async types.
During that refactoring, we introduced a bug that manifests in environments with complex classloading requirements, such as WildFly.
In this release, the bug is fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the programmatic API documentation was slightly improved.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3/" rel="alternate" type="text/html" title="Fault Tolerance 5.3" /><published>2022-02-08T16:00:00+00:00</published><updated>2022-02-08T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.0.
This release includes one big new feature, the programmatic API, and several smaller additions and fixes.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programmatic_api&quot;&gt;Programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the very beginning, SmallRye Fault Tolerance has implemented the MicroProfile Fault Tolerance declarative, annotation-based API.
It also has several SmallRye-specific additions to this API, such as retry backoff strategies or circuit breaker maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, SmallRye Fault Tolerance adds an alternative, programmatic API.
It has &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/programmatic-api.html&quot;&gt;extensive documentation&lt;/a&gt;, so we&amp;#8217;ll just provide a short overview here.
Let&amp;#8217;s start with an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
        .withCircuitBreaker().done()
        .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
        .build();

    public String hello() throws Exception {
        return guard.call(externalService::hello);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important part of this snippet is the &lt;code&gt;guard&lt;/code&gt; variable.
It contains a &lt;code&gt;FaultTolerance&lt;/code&gt; instance, which is basically a configured set of fault tolerance strategies.
The builder API allows creating the same fault tolerance strategies as the annotation-based API of MicroProfile Fault Tolerance.
Order of &lt;code&gt;with*&lt;/code&gt; method invocations doesn&amp;#8217;t matter, the fault tolerance strategies are ordered according to the MicroProfile Fault Tolerance specification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance&lt;/code&gt; interface includes methods to run a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt; and guard them.
That&amp;#8217;s what &lt;code&gt;guard.call(...)&lt;/code&gt; does in the body of the &lt;code&gt;hello&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;FaultTolerance&lt;/code&gt; instance created like this may be used to guard multiple different actions.
If you only need to guard a single action, the previous example can be shortened to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private final Callable&amp;lt;String&amp;gt; guard = FaultTolerance.createCallable(externalService::hello)
            .withCircuitBreaker().done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();

    public String hello() throws Exception {
        return guard.call();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly to the set of &lt;code&gt;FaultTolerance&lt;/code&gt; methods to guard various types of actions, there&amp;#8217;s a set of &lt;code&gt;create*&lt;/code&gt; static methods to create a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt;. There&amp;#8217;s also a set of &lt;code&gt;createAsync*&lt;/code&gt; static methods to guard asynchronous actions using &lt;code&gt;CompletionStage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mutiny_support&quot;&gt;Mutiny support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; artifact, also described below in the section on additional async types, contains a &lt;code&gt;MutinyFaultTolerance&lt;/code&gt; interface.
That interface contains &lt;code&gt;create*&lt;/code&gt; static methods to guard asynchronous actions that return the Mutiny &lt;code&gt;Uni&lt;/code&gt; type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The programmatic API has one feature that the declarative API doesn&amp;#8217;t have: ability to observe certain events.
For example, when configuring a circuit breaker, it is possible to register a callback for circuit breaker state changes or for a situation when an open circuit breaker prevents an invocation.
When configuring a timeout, it is possible to register a callback for when the invocation times out, etc. etc.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
    .withTimeout().duration(5, ChronoUnit.SECONDS).onTimeout(() -&amp;gt; ...).done()
    .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;circuit_breaker_maintenance&quot;&gt;Circuit breaker maintenance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s one exception to the above claim that the declarative API isn&amp;#8217;t able to observe events.
With this release, &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; gains a method to observe circuit breaker state changes.
No other events are exposed to the declarative API at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the programmatic API also has a method to obtain &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt;: &lt;code&gt;FaultTolerance.circuitBreakerMaintenance()&lt;/code&gt;.
This methods returns the same object that you can &lt;code&gt;@Inject&lt;/code&gt;, because circuit breakers created by the programmatic API and declarative API are stored in the same registry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;inspecting_exception_causes&quot;&gt;Inspecting exception causes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@CircuitBreaker&lt;/code&gt;, &lt;code&gt;@Fallback&lt;/code&gt; and &lt;code&gt;@Retry&lt;/code&gt; fault tolerance strategies allow declaring the set of exception types for which the strategy should apply (or be ignored).
When an exception is thrown, its class is checked for presence in one of these sets, and the strategy behaves accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works fine, until wrapper exceptions come to play.
In certain contexts, the true exceptions are often (or always) wrapped into another exception.
In such situation, configuring when a fault tolerance strategy should apply or be ignored becomes nearly impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, SmallRye Fault Tolerance adds a non-standard feature to solve this problem.
In the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/extra.html#_non_compatible_mode&quot;&gt;non-compatible mode&lt;/a&gt;, if the class of the thrown exception isn&amp;#8217;t present in either of the two sets, the cause chain of the exception is inspected automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;revamped_async_types_support&quot;&gt;Revamped async types support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance offers support for more asynchronous types than just MicroProfile Fault Tolerance mandated &lt;code&gt;CompletionStage&lt;/code&gt;.
So far, that support was based on the SmallRye Reactive Converters project, because that offers conversion between &lt;code&gt;CompletionStage&lt;/code&gt; and other types.
Asynchronous implementations of fault tolerance strategies in SmallRye Fault Tolerance are based on &lt;code&gt;CompletionStage&lt;/code&gt;, so that seems like a natural fit, but it has one issue.
In case the other async type is lazy (which is always the case with RxJava, Mutiny or Reactor), resubscription doesn&amp;#8217;t work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the dependency on SmallRye Reactive Converters is dropped.
Instead, SmallRye Fault Tolerance has its own set of support libraries for various reactive types.
These support libraries convert between types lazily, so resubscription works properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, there&amp;#8217;s &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; for Mutiny and &lt;code&gt;smallrye-fault-tolerance-rxjava3&lt;/code&gt; for RxJava 3. Support for RxJava 1, RxJava 2 and Reactor was dropped, but may easily be added back if there&amp;#8217;s a need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use &lt;code&gt;@Fallback&lt;/code&gt; with a &lt;code&gt;FallbackHandler&lt;/code&gt; class, you might have found that such fallback handler triggers a validation error when guarding methods that declare a primitive return type (or &lt;code&gt;void&lt;/code&gt;).
This has been fixed.
A &lt;code&gt;FallbackHandler&lt;/code&gt; that declares a wrapper type (such as &lt;code&gt;java.lang.Integer&lt;/code&gt;) now correctly matches a corresponding primitive type (such as &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.3.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;d be specifically interested in any feedback on the programmatic API.
This is very new, so you have a unique chance to influence its future!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Log4j2 Vulnerability and SmallRye</title><link href="https://www.smallrye.io/blog/log4j2-vulnerability/" rel="alternate" type="text/html" title="Log4j2 Vulnerability and SmallRye" /><published>2021-12-13T12:00:00+00:00</published><updated>2021-12-13T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/log4j2-vulnerability</id><content type="html" xml:base="https://www.smallrye.io/blog/log4j2-vulnerability/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Thursday (December 9th), a 0-day exploit in the popular Java logging library log4j (version 2) was discovered that
results in Remote Code Execution (RCE) by logging a certain string. Please check the following links for additional
information on this vulnerability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;CVE-2021-44228 Detail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/advisories/GHSA-jfh8-c2jp-5v3q&quot;&gt;Remote code injection in Log4j&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lunasec.io/docs/blog/log4j-zero-day/&quot;&gt;Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you are using &lt;code&gt;log4j2&lt;/code&gt;, or have it available in your runtime we advise you to update it to &lt;code&gt;2.15.0&lt;/code&gt; as soon as
possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_does_this_mean_for_smallrye&quot;&gt;What does this mean for SmallRye?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye libraries do not include or use any &lt;code&gt;log4j&lt;/code&gt; artifacts in their runtime dependencies. Below you can find a
detailed report for each SmallRye dependency (we used the Maven Dependency Plugin to search for possible inclusions):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;smallrye-async-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-context-propagation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-fault-tolerance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-graphql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-jwt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-maven-plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-vertx-bindings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-open-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentelemetry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-parent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-messaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-safer-annotations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-stork&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/assets/content/2021-12-12-log4j2-report.txt&quot;&gt;SmallRye Dependency Log4j2 Report&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The command used was &lt;code&gt;mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:tree -Dincludes=org.apache.logging.log4j::: -Dverbose&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We were able to find that &lt;code&gt;smallrye-reactive-messaging-kafka&lt;/code&gt; and &lt;code&gt;smallrye-stork-service-discovery-eureka&lt;/code&gt; reference
&lt;code&gt;log4j2&lt;/code&gt; artifacts, but only in the &lt;code&gt;test&lt;/code&gt; scope, so this is not an issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, since all SmallRye projects receive &lt;code&gt;dependabot&lt;/code&gt; updates, we can detect any possible updates to
&lt;code&gt;log4j2&lt;/code&gt; dependencies with the following &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+author%3Aapp%2Fdependabot+user%3Asmallrye+log4j+in%3Atitle&quot;&gt;Github Report&lt;/a&gt;. Indeed, there were two
updates sent by &lt;code&gt;dependabot&lt;/code&gt; to &lt;code&gt;smallrye-mutiny-vertx-bindings&lt;/code&gt;, but these updates target the dependencies of a Maven
plugin execution, so again, not an issue for runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_information&quot;&gt;Additional Information&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if SmallRye itself is not directly affected by this vulnerability, the runtime where you are running may be
compromised. Check if this is the case and upgrade the &lt;code&gt;log4j2&lt;/code&gt; version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out to the SmallRye team if you experience any issue with any of the SmallRye libraries to
the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="log4j2" /><category term="smallrye" /></entry><entry><title type="html">Fault Tolerance 5.2.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.2.1" /><published>2021-07-16T13:00:00+00:00</published><updated>2021-07-16T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.1.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-0/&quot;&gt;SmallRye Fault Tolerance 5.0&lt;/a&gt;, we introduced support for the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations.
From SmallRye Fault Tolerance perspective, these annotations make sense for methods that return an async type, such as &lt;code&gt;CompletionStage&lt;/code&gt; or &lt;code&gt;Uni&lt;/code&gt;.
Naturally, we added validation, so that if the annotation was present on a method with some other return type, deployment would fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is actually problematic, because these annotations are generic.
They are used by other frameworks and libraries (such as SmallRye Reactive Messaging or RESTEasy Reactive).
In such case, SmallRye Fault Tolerance should just ignore them.
However, if the annotation was present on a method that also applied some fault tolerance annotation, SmallRye Fault Tolerance would run the validation and fail the deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the validation is simply removed.
SmallRye Fault Tolerance can&amp;#8217;t know if the annotation is meant for some other framework or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we fixed some typos in the documentation.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2/" rel="alternate" type="text/html" title="Fault Tolerance 5.2" /><published>2021-07-02T14:00:00+00:00</published><updated>2021-07-02T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.0.
This release includes several new features and fixes.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.1.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;backoff_strategies_for_retry&quot;&gt;Backoff strategies for &lt;code&gt;@Retry&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Retry&lt;/code&gt; annotation in MicroProfile Fault Tolerance supports a single backoff strategy: constant.
That is, the delay between all retry attempts is identical (with the exception of a random jitter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance now offers 3 annotations to specify a different backoff strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ExponentialBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@FibonacciBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@CustomBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of these annotations may be present on a program element annotated &lt;code&gt;@Retry&lt;/code&gt;, and it modifies the retry behavior.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
public class MyService {
    @Retry
    @ExponentialBackoff
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;code&gt;@ExponentialBackoff&lt;/code&gt;, the delays between retry attempts will grow exponentially.
With &lt;code&gt;@FibonacciBackoff&lt;/code&gt;, the delays will grow per the Fibonacci sequence.
With &lt;code&gt;@CustomBackoff&lt;/code&gt;, it is possible to implement completely custom backoff strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_backoff_strategies_for_retry&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blocking_and_nonblocking_on_classes&quot;&gt;&lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; on classes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, we only documented (and tested) the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations on methods.
However, these annotations can be placed on classes as well, so in this release, we documented that and tightened some validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, if you addded both of these annotations to the same method, SmallRye Fault Tolerance wouldn&amp;#8217;t complain, even though this is clearly a mistake.
This situation is now detected and application deployment ends with an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if one of these annotations is placed on a class and the other on a method, that is a perfectly valid situation.
In such case, the annotation on method has priority over the one on class.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
@NonBlocking
public class MyService {
    @Retry
    @Blocking
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;hello&lt;/code&gt; method is treated as &lt;code&gt;@Blocking&lt;/code&gt;, but other methods would inherit the &lt;code&gt;@NonBlocking&lt;/code&gt; annotation from the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#blocking-nonblocking&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non_compatible_mode_for_determining_asynchrony&quot;&gt;Non-compatible mode for determining asynchrony&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the &lt;code&gt;@Asynchronous&lt;/code&gt;, &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations, SmallRye Fault Tolerance now offers a mode where method asynchrony is determined solely from the its return type.
This mode is &lt;strong&gt;not compatible&lt;/strong&gt; with the MicroProfile Fault Tolerance specification and doesn&amp;#8217;t pass 2 tests in the TCK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, this mode is disabled by default.
To enable it, set the configuration property &lt;code&gt;smallrye.faulttolerance.mp-compatibility&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the non-compatible mode is enabled, methods that have some fault tolerance strategy and return &lt;code&gt;CompletionStage&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be offloaded to a thread pool, yet will have asynchronous fault tolerance applied automatically.
In other words, they will be treated as if they were annotated &lt;code&gt;@NonBlocking&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @Retry
    CompletionStage&amp;lt;String&amp;gt; hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;hello&lt;/code&gt; method here will be executed on the original thread (as if it was annotated &lt;code&gt;@NonBlocking&lt;/code&gt;) and will have asynchronous fault tolerance applied.
That is, if the returned &lt;code&gt;CompletionStage&lt;/code&gt; completes with an exception, it will be retried.
(Per the MicroProfile Fault Tolerance specification, retry shouldn&amp;#8217;t happen in such case.
The compatible mode conforms to the specification, but we find that behavior less and less appropriate.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus will enable this mode by default in the 2.1.0.Final release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together with the new features described above, we have also performed a major internal refactoring.
The configuration system, the single last remnant of SmallRye Fault Tolerance 2.x, has been rewritten from scratch.
Instead of storing configuration values into a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;, the new system is based on configuration interfaces.
Implementations of these interfaces are automatically generated during SmallRye Fault Tolerance build, using an annotation processor.
See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/internals/config.html&quot;&gt;the documentation&lt;/a&gt; for more details if you&amp;#8217;re interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, we have fixed a small bug in &lt;code&gt;@Fallback&lt;/code&gt; validation.
If you had a method guarded with &lt;code&gt;@Fallback&lt;/code&gt; that returned a raw type (such as &lt;code&gt;List&lt;/code&gt;), and its fallback method retured a parameterized type (such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;), the validation code would enter an infinite regress.
This case is now handled properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.2.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.1" /><published>2021-05-18T08:00:00+00:00</published><updated>2021-05-18T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-1/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.1.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.1.0.
This release includes some important bug fixes and one new feature.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.0.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;java_16_support&quot;&gt;Java 16 support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance includes a small utility class that helps calling &lt;code&gt;default&lt;/code&gt; methods when they are declared as fallback methods with &lt;code&gt;@Fallback&lt;/code&gt;.
This class uses reflection to crack open some internal JDK classes on Java 8.
Naturally, since Java 9, the JDK started complaining, and since Java 16, this became an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, we have a variant of that utility class that uses Java 9 public API, and the main SmallRye Fault Tolerance JAR has, for a long time, been a multi-release JAR.
Unfortunately, we introduced a bug in SmallRye Fault Tolerance 4.3.1.
This bug causes the main SmallRye Fault Tolerance JAR to omit the &lt;code&gt;META-INF/versions/9&lt;/code&gt; directory, and so the Java 8 variant of the class is the only one present.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the 5.1.0 release, we fixed that bug and made sure the SmallRye Fault Tolerance release process is executed with Java 11.
Hence, SmallRye Fault Tolerance should once again work as intended on all Java versions, particularly on Java 16.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that even though we run the release process with Java 11, we still produce Java 8 bytecode.
Java 8 is still supported with SmallRye Fault Tolerance 5.1.0, even though we may drop this support in future versions.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;vert_x_integration&quot;&gt;Vert.x integration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In certain situations, SmallRye Fault Tolerance runs &lt;code&gt;@NonBlocking&lt;/code&gt; methods on a different thread than the original call was made on.
This includes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Retry&lt;/code&gt; methods, where a non-zero retry delay is configured (the delay must not block);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Bulkhead&lt;/code&gt; methods, where a non-zero bulkhead queue is configured (if the invocation is queued).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, we run such guarded methods on a thread pool provided by the integrator.
In this release, we provide an integration API for event loops, as well as an implementation of this API for Vert.x.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this integration enabled, invocations of &lt;code&gt;@NonBlocking&lt;/code&gt; methods made on an event loop thread are always executed on the same event loop thread.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information, see &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.1.0/usage/extra.html#blocking-nonblocking&quot;&gt;user documentation&lt;/a&gt; and &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.1.0/integration/event-loop.html&quot;&gt;integration documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have also significantly expanded our CI coverage.
We now run tests with:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;all Java LTS releases we care about (at this moment, Java 8 and 11);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the latest Java release (at this moment, Java 16);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the upcoming Java release (at this moment, Java 17-ea).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All of this on Linux, Windows and macOS, thanks to GitHub Actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(In fact, we currently don&amp;#8217;t run tests with Java 17-ea, because of &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues/412&quot;&gt;a bug&lt;/a&gt; in JBoss Class File Writer. That should be resolved shortly, and we are not aware of any other issue with Java 17-ea.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this CI coverage expansion, we found and fixed a particularly nasty concurrency issue in handling &lt;code&gt;@Timeout&lt;/code&gt;s on &lt;code&gt;Future&lt;/code&gt;-returning methods when &lt;code&gt;@Retry&lt;/code&gt; is present.
&lt;code&gt;@Bulkhead&lt;/code&gt;s on &lt;code&gt;Future&lt;/code&gt;-returning methods, in presence of &lt;code&gt;@Retry&lt;/code&gt;, were fixed as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.1.0 is therefore very much recommended!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-0/" rel="alternate" type="text/html" title="Fault Tolerance 5.0" /><published>2021-01-18T08:00:00+00:00</published><updated>2021-01-18T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Roughly a year ago, we &lt;a href=&quot;/blog/fault-tolerance-4-0/&quot;&gt;announced&lt;/a&gt; the release of SmallRye Fault Tolerance 4.0, the new implementation of Eclipse MicroProfile Fault Tolerance.
Today, we bring you version 5.0, an evolution of the 4.x stream that fully implements MicroProfile Fault Tolerance 3.0 and brings a lot of improvements and even new features.
These new features are not present in the MicroProfile Fault Tolerance specification, but were requested by users, especially in the Quarkus community.
In addition, the API for integrators has been simplified significantly, and the first version of &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/index.html&quot;&gt;documentation&lt;/a&gt; is also ready.
Let&amp;#8217;s take a look.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;microprofile_fault_tolerance_3_0&quot;&gt;MicroProfile Fault Tolerance 3.0&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From user&amp;#8217;s perspective, MicroProfile Fault Tolerance 3.0 is a relatively small release, including just two important changes: metrics overhaul, and lifecycle specification for circuit breakers and bulkheads.
It is a major release because the metrics changes are very much backwards incompatible, so pay attention to that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;metrics_overhaul&quot;&gt;Metrics overhaul&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The fault tolerance metrics now take advantage of tags.
Most importantly, the full method name used to be a part of the metric name, but it&amp;#8217;s now a metric tag.
For example, suppose we have a method guarded with the &lt;code&gt;@Timeout&lt;/code&gt; strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@Singleton
public class MyService {
    @Timeout
    public String hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, if you wanted to know how many times this method timed out, you&amp;#8217;d have to look at the metric called &lt;code&gt;ft.com.example.MyService.hello.timeout.callsTimedOut.total&lt;/code&gt;.
With MicroProfile Fault Tolerance 3.0, you need to look at &lt;code&gt;ft.timeout.calls.total{method=&quot;com.example.MyService.hello&quot;, timedOut=&quot;true&quot;}&lt;/code&gt; instead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find all the new metric names and possible tags in the &lt;a href=&quot;https://download.eclipse.org/microprofile/microprofile-fault-tolerance-3.0/microprofile-fault-tolerance-spec-3.0.html#_integration_with_microprofile_metrics&quot;&gt;MicroProfile Fault Tolerance 3.0 specification&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, fault tolerance metrics moved from the &lt;code&gt;application&lt;/code&gt; scope to &lt;code&gt;base&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;lifecycle_specification_for_circuit_breakers_and_bulkheads&quot;&gt;Lifecycle specification for circuit breakers and bulkheads&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, MicroProfile Fault Tolerance didn&amp;#8217;t specify lifecycle for stateful fault tolerance strategies, that is, circuit breakers and bulkheads.
This becomes important when you have &lt;code&gt;@RequestScoped&lt;/code&gt; beans, such as:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@RequestScoped
public class MyService {
    @CircuitBreaker
    public String hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You get a new instance of the bean for each request, and the MicroProfile Fault Tolerance specification didn&amp;#8217;t say whether all such instances share the same circuit breaker for the &lt;code&gt;hello&lt;/code&gt; method, or if each instance has its own.
The specification now mandates that all instances share the same circuit breaker.
Bulkheads behave identically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This behavior was actually implemented by SmallRye Fault Tolerance since the beginning, so no behavioral change for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;smallrye_fault_tolerance_improvements&quot;&gt;SmallRye Fault Tolerance improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SmallRye Fault Tolerance 5.0 release brings a lof of additional improvements, both internal and user-facing.
Changes that concern SmallRye Fault Tolerance integrators are described in more detail in a subsequent section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;circuit_breaker_maintenance&quot;&gt;Circuit breaker maintenance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have previously &lt;a href=&quot;/blog/fault-tolerance-4-2-and-4-3/&quot;&gt;introduced&lt;/a&gt; a way to observe circuit breaker state changes, using the &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; CDI event.
This was subsequently &lt;a href=&quot;/blog/fault-tolerance-4-3-1/&quot;&gt;deprecated&lt;/a&gt;, because we found a better way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the &lt;code&gt;CircuitBreakerStateChanged&lt;/code&gt; CDI event is removed, and a new API for circuit breaker maintenance is introduced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Circuit breakers can now be given a name using the &lt;code&gt;@CircuitBreakerName&lt;/code&gt; annotation.
Afterwards, you can &lt;code&gt;@Inject&lt;/code&gt; a &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; and use its &lt;code&gt;currentState&lt;/code&gt; method to obtain current status of the circuit breaker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition, &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; also allows you to reset any given named circuit breaker (&lt;code&gt;reset&lt;/code&gt;), or all circuit breakers (&lt;code&gt;resetAll&lt;/code&gt;), to the initial state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#_circuit_breaker_maintenance&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;blocking_and_nonblocking&quot;&gt;&lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the MicroProfile Fault Tolerance &lt;code&gt;@Asynchronous&lt;/code&gt; annotation, we also introduce support for the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations from SmallRye Common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;@Blocking&lt;/code&gt; means that the annotated method blocks and hence its execution must be offloaded to another thread.
This is basically equivalent to &lt;code&gt;@Asynchronous&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On the other hand, &lt;code&gt;@NonBlocking&lt;/code&gt; means that the annotated method doesn&amp;#8217;t block and hence execution &lt;em&gt;doesn&amp;#8217;t&lt;/em&gt; have to be moved to another thread, yet all asynchronous fault tolerance behaviors are still supported.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that these annotations are only taken into account if the annotated method also applies some other fault tolerance strategy, such as &lt;code&gt;@Fallback&lt;/code&gt; or &lt;code&gt;@Retry&lt;/code&gt;, &lt;em&gt;and&lt;/em&gt; if the method returns &lt;code&gt;CompletionStage&lt;/code&gt; (or some of the additional asynchronous types as described below).
If there&amp;#8217;s no fault tolerance annotation, or if the method doesn&amp;#8217;t return &lt;code&gt;CompletionStage&lt;/code&gt;, SmallRye Fault Tolerance will ignore the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations completely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#blocking-nonblocking&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional_asynchronous_types&quot;&gt;Additional asynchronous types&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to &lt;code&gt;CompletionStage&lt;/code&gt;, SmallRye Fault Tolerance now supports additional asynchronous types from libraries such as RxJava, Mutiny or Reactor.
Note that only single-valued types, such as &lt;code&gt;Single&lt;/code&gt; or &lt;code&gt;Uni&lt;/code&gt;, are supported; stream-like types are not, because their semantics can&amp;#8217;t be easily expressed in terms of &lt;code&gt;CompletionStage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This support is based on the &lt;a href=&quot;https://github.com/smallrye/smallrye-reactive-utils/tree/main/reactive-converters&quot;&gt;SmallRye Reactive Converters&lt;/a&gt; project, so you have to make sure that the corresponding converter library is present.
Integrators may include some converters by default if they choose so.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/usage/extra.html#_additional_asynchronous_types&quot;&gt;documentation&lt;/a&gt; for more information and examples.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;other_improvements&quot;&gt;Other improvements&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Exception handling in half-open circuit breakers was fixed.
Previously, half-open circuit breakers would treat all exceptions as failures, which is wrong.
Even in the half-open state, circuit breakers have to consider the &lt;code&gt;failOn&lt;/code&gt; and &lt;code&gt;skipOn&lt;/code&gt; configuration.
This bug was not caught, because the MicroProfile Fault Tolerance TCK doesn&amp;#8217;t have a test.
That is something we are also going to fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Circuit breakers were also improved to reject excess attempts in the half-open state.
Previously, half-open circuit breakers would allow all invocations to go through, which kinda defeats the purpose of the half-open state.
This was improved to only allow the first &lt;code&gt;successThreshold&lt;/code&gt; invocations (also called &quot;probe invocations&quot;); the excess ones are outright rejected.
It is only after moving to the closed state when all invocations are allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All &lt;code&gt;CompletionStage&lt;/code&gt; fault tolerance strategies were examined and improved to avoid premature thread offload.
This was required for the &lt;code&gt;@NonBlocking&lt;/code&gt; support described above, but it&amp;#8217;s also an important optimization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thread pool usage was radically improved.
Previously, SmallRye Fault Tolerance would use 1 thread pool for executing &lt;code&gt;@Asynchronous&lt;/code&gt; methods, 1 thread pool for watching for timeouts, and 1 thread pool for each thread pool style bulkhead.
Now, SmallRye Fault Tolerance uses a single thread pool for everything.
Thread pool style bulkheads were also significantly optimized.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The metrics subsystem was completely rewritten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Trace logging has been added for all core implementations of fault tolerance strategies.
We also started using &lt;a href=&quot;https://jboss-logging.github.io/jboss-logging-tools/&quot;&gt;JBoss Logging Tools&lt;/a&gt; to generate logger implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;integration_changes&quot;&gt;Integration changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How SmallRye Fault Tolerance can be integrated into a runtime has changed in two important ways: the thread pool integration is now based on CDI, and some additional dependencies are required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, the thread pool integration was based on &lt;code&gt;ServiceLoader&lt;/code&gt;.
Integrators had to provide implementation of the &lt;code&gt;ExecutorFactory&lt;/code&gt; interface, which allowed customizing how all the different thread pools are created.
With the 5.0 release, SmallRye Fault Tolerance no longer insists on creating its own thread pools.
Instead, it works with a single thread pool and expects integrator to provide it via CDI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, integrators should provide a CDI bean implementing the &lt;code&gt;AsyncExecutorProvider&lt;/code&gt; interface.
This implementation should be &lt;code&gt;@Singleton&lt;/code&gt;, must be marked as alternative and selected globally for the application.
The interface has one method that returns the thread pool which the integrator desires to use for fault tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the integrator doesn&amp;#8217;t want to manage their own thread pool for fault tolerance, they can subclass &lt;code&gt;DefaultAsyncExecutorProvider&lt;/code&gt;.
This at least allows customizing the &lt;code&gt;ThreadFactory&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As described above, the SmallRye Reactive Converters project is used to add support for additional asynchronous types.
This means that SmallRye Fault Tolerance requires the &lt;code&gt;io.smallrye.reactive:smallrye-reactive-converter-api&lt;/code&gt; artifact to be present.
Presence of Reactive Converter API implementations is optional, but the API itself is mandatory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Read the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.0.0/integration/intro.html&quot;&gt;integration documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Looking back at the &lt;a href=&quot;/blog/fault-tolerance-4-0/&quot;&gt;4.0 announcement&lt;/a&gt;, we have since implemented almost all the planned improvements in SmallRye Fault Tolerance internals.
On the other hand, the user-facing improvements we planned had to be postponed&amp;#8201;&amp;#8212;&amp;#8201;but we implemented other user-facing improvements instead.
We still intend to work on &lt;code&gt;@FailFast&lt;/code&gt; or &lt;code&gt;@AdaptiveBulkhead&lt;/code&gt;, but feature requests or bug reports by actual users will always have priority.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With that in mind, please don&amp;#8217;t hesitate to get in touch.
You can use the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;SmallRye Fault Tolerance issue tracker&lt;/a&gt;, the &lt;a href=&quot;https://quarkusio.zulipchat.com&quot;&gt;Zulip Chat&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/smallrye-io/fault-tolerance&quot;&gt;SmallRye Fault Tolerance Gitter&lt;/a&gt;, or the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>