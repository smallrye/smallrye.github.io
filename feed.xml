<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2022-08-26T12:20:53+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Jandex 3.0.0</title><link href="https://www.smallrye.io/blog/jandex-3-0-0/" rel="alternate" type="text/html" title="Jandex 3.0.0" /><published>2022-08-25T19:00:00+00:00</published><updated>2022-08-25T19:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-0-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-0-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex is a space efficient Java class file indexer and offline reflection library.
For many years, it lived in the WildFly GitHub organization, as it was originally written for WildFly (actually for JBoss AS 7, WildFly&amp;#8217;s predecessor).
Recently, Quarkus accelerated Jandex usage outside of WildFly, prompting for higher pace of bug fixes and new features, and we felt that WildFly is no longer the best home for Jandex.
With a hint of sadness, we bid farewell to WildFly (you&amp;#8217;ve been the best for long!) and are proud to announce that we settle comfortably in the SmallRye space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye started as a set of implementations of MicroProfile specifications that could be shared among various runtimes, but it has long been way more than that.
Importantly, both WildFly and Quarkus use SmallRye components, so Jandex is certainly no stranger here.
To highlight that, without further ado, we announce the first release of Jandex in SmallRye, version 3.0.0!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 contains many bug fixes and features and, given the major version bump, also some breaking changes.
But fear not&amp;#8201;&amp;#8212;&amp;#8201;upgrading is still pretty easy.
The full list of changes &lt;a href=&quot;https://github.com/smallrye/jandex/milestone/3?closed=1&quot;&gt;can be found&lt;/a&gt; in the Jandex issue tracker (which, by the way, moved to GitHub Issues a while ago).
Here, we&amp;#8217;ll highlight all the important ones and describe how to migrate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the following text is pretty long and detailed.
If you want a TLDR, feel free to skip to the &lt;a href=&quot;#summary&quot;&gt;summary&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;move_to_smallrye&quot;&gt;Move to SmallRye&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned, Jandex is now a SmallRye project.
As part of that, we&amp;#8217;ve consolidated all the Jandex projects into a single repository: &lt;a href=&quot;https://github.com/smallrye/jandex/&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/jandex/&lt;/a&gt;.
This means that the Jandex Maven plugin is released together with Jandex core, and if you contribute, you no longer have to add test classes to a dedicated &lt;code&gt;typeannotation-test&lt;/code&gt; project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This also entails a change in Maven coordinates.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Old coordinates&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New coordinates&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;org.jboss:jandex&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.smallrye:jandex&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;org.jboss.jandex:jandex-maven-plugin&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;io.smallrye:jandex-maven-plugin&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: if you use the Maven Enforcer plugin, configure it to ban any dependencies on &lt;code&gt;org.jboss:jandex&lt;/code&gt;.
Similar plugin exists for Gradle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;move_to_java_8&quot;&gt;Move to Java 8&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 2.x is a Java 6 project.
That has never been a problem, but Java 6 is just too old these days.
However, Jandex has always been and continues to be conservative.
Even though the major Jandex consumers we know of require Java 11 now, Jandex only bumps to Java 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing changes on the ability to parse new Java bytecode.
Jandex running on Java 8 can still parse Java 17 bytecode just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation&lt;/strong&gt;: if you are not on Java 8+ yet, you really should be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uniform_annotation_access&quot;&gt;Uniform annotation access&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Accessing annotations has been the original primary use case for Jandex.
However, it has never been very uniform.
The &lt;code&gt;ClassInfo&lt;/code&gt; type has different methods to access annotations than &lt;code&gt;MethodInfo&lt;/code&gt; or &lt;code&gt;FieldInfo&lt;/code&gt;.
The &lt;code&gt;AnnotationTarget&lt;/code&gt; interface, which all &quot;annotated things&quot; implement, has no annotation-related methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Jandex 3.0.0, this changes.
The &lt;code&gt;AnnotationTarget&lt;/code&gt; interface gains a slew of method for accessing annotations.
There are 2 kinds of them, actually:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;methods that access annotations directly on the target;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;methods that access annotations on the target and all nested annotation targets.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The 2nd is how Jandex used to always operate, but the 1st is often what you need.
Now, both options are available.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Purpose&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Directly on the target&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;On the target and nested targets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Has annotation of given type?&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;hasDeclaredAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;hasAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get single annotation of given type&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotation(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations of given type (not repeatable)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;doesn&amp;#8217;t make sense, there may only be one&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotations(DotName)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations of given type, including repeatable&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotationsWithRepeatable(DotName, IndexView)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotationsWithRepeatable(DotName, IndexView)&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Get all annotations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;declaredAnnotations()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;annotations()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; there used to be a &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; method returning a &lt;code&gt;Map&lt;/code&gt;.
That method is renamed to &lt;code&gt;ClassInfo.annotationsMap()&lt;/code&gt;.
The &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; method returns a &lt;code&gt;List&lt;/code&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call the &lt;code&gt;Map&lt;/code&gt;-returning &lt;code&gt;annotations()&lt;/code&gt; method on &lt;code&gt;ClassInfo&lt;/code&gt;, move to &lt;code&gt;annotationsMap()&lt;/code&gt;.
Note that callers of this method compiled against Jandex 2.x will continue running correctly, because Jandex 3.0.0 includes a synthetic bridge method for binary compatibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;classAnnotation()&lt;/code&gt;, &lt;code&gt;classAnnotationsWithRepeatable()&lt;/code&gt; and &lt;code&gt;classAnnotations()&lt;/code&gt; methods on &lt;code&gt;ClassInfo&lt;/code&gt; are now deprecated, with the corresponding &lt;code&gt;declaredAnnotation*&lt;/code&gt; methods being the suggested replacement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call any of the &lt;code&gt;classAnnotation*&lt;/code&gt; methods on &lt;code&gt;ClassInfo&lt;/code&gt;, move to &lt;code&gt;declaredAnnotation*&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you call the existing methods that access annotations both on the target and nested annotation targets, and then filter them out to retain only the annotations declared directly on the target, use the &lt;code&gt;declaredAnnotation*&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;uniform_method_parameter_access&quot;&gt;Uniform method parameter access&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex uses the &lt;code&gt;MethodInfo&lt;/code&gt; class to represent methods and &lt;code&gt;MethodParameterInfo&lt;/code&gt; to represent method parameters.
However, &lt;code&gt;MethodInfo&lt;/code&gt; used to never expose any access to &lt;code&gt;MethodParameterInfo&lt;/code&gt;.
You could only access parameters from &lt;code&gt;MethodInfo&lt;/code&gt; through the &lt;code&gt;parameterName(int)&lt;/code&gt; and &lt;code&gt;parameters()&lt;/code&gt; methods, where the &lt;code&gt;parameterName()&lt;/code&gt; returned the name of given parameter, while &lt;code&gt;parameters()&lt;/code&gt; returned the list of parameter types.
The &lt;code&gt;MethodParameterInfo&lt;/code&gt; class was only used to represent a target of &lt;code&gt;AnnotationInstance&lt;/code&gt;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is not very convenient.
In Jandex 3.0.0, &lt;code&gt;MethodInfo&lt;/code&gt; has several methods to access parameters:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parametersCount()&lt;/code&gt;: returns the number of parameters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterTypes()&lt;/code&gt;: returns the list of parameter types&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterName(int)&lt;/code&gt;: returns the name of given parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameterType(int)&lt;/code&gt;: returns the type of given parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;parameters()&lt;/code&gt;: returns the list of parameters as &lt;code&gt;MethodParameterInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; there used to be a &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; method returning a &lt;code&gt;List&amp;lt;Type&amp;gt;&lt;/code&gt;.
That method is renamed to &lt;code&gt;MethodInfo.parameterTypes()&lt;/code&gt;.
The &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; method returns &lt;code&gt;List&amp;lt;MethodParameterInfo&amp;gt;&lt;/code&gt; now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; inspect your code that accesses method parameters.
It can usually be simplified using the newly introduced methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;synthetic_and_mandated_parameters&quot;&gt;Synthetic and mandated parameters&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to parameters explicitly declared in the source code, bytecode generators (such as &lt;code&gt;javac&lt;/code&gt;) sometimes have to emit additional parameters.
When these parameters are prescribed by the Java Language Specification (JLS), they are called &lt;em&gt;implicitly declared&lt;/em&gt; or &lt;em&gt;mandated&lt;/em&gt;.
Otherwise, they are an artifact of compiler implementation and called &lt;em&gt;synthetic&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex used to pretty much not care.
Sometimes, you would see these extra parameters, while sometimes, you would not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jandex 3.0.0, the parameter accessing methods mentioned above never return synthetic and mandated parameters.
(At least in the vast majority of cases.
Jandex uses the &lt;code&gt;Signature&lt;/code&gt; bytecode attribute and a few simple heuristics to figure out the list of explicitly declared parameters.
It seems &lt;code&gt;javac&lt;/code&gt; emits the &lt;code&gt;Signature&lt;/code&gt; attribute for all methods that have synthetic/mandated parameters, even if it wouldn&amp;#8217;t have to, so classes compiled with &lt;code&gt;javac&lt;/code&gt; should be fine.
There are rare cases, involving constructors of local/anonymous classes that capture lexically enclosing variables, where Jandex will return synthetic/mandated parameters for classes compiled with ECJ.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For special occasions where access to the full list of method parameters (based on the method descriptor) is required, there are 2 more methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;descriptorParametersCount()&lt;/code&gt;: returns the number of parameters including synthetic/mandated&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;descriptorParameterTypes()&lt;/code&gt;: returns the list of parameter types including synthetic/mandated&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The parameter types obtained from method descriptor are never annotated and their position in the list &lt;em&gt;cannot&lt;/em&gt; be used to obtain a parameter name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; in most cases, you don&amp;#8217;t need these methods.
Use the &lt;code&gt;parameter*&lt;/code&gt; methods by default and only resort to &lt;code&gt;descriptorParameter*&lt;/code&gt; when you need to.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;proper_representation_of_recursive_type_parameters&quot;&gt;Proper representation of recursive type parameters&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex includes a faithful representation of the Java type system, including generic types.
Type parameters, and type variables in general, used to be represented by one of the following 2 classes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnresolvedTypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A type variable can be unresolved for example when you&amp;#8217;re indexing an incomplete classpath.
However, with Jandex 2.x, a type variable may also be unresolved when it occurs in its own definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, one often defines type parameters like &lt;code&gt;&amp;lt;T extends Comparable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;.
This type parameter definition is &lt;em&gt;recursive&lt;/em&gt; in &lt;code&gt;T&lt;/code&gt;.
Since Jandex types generally do not form cycles, the first occurence of &lt;code&gt;T&lt;/code&gt; is represented as &lt;code&gt;TypeVariable&lt;/code&gt;, but the second occurence as &lt;code&gt;UnresolvedTypeVariable&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To become more faithful yet still avoid cycles in the object model, Jandex 3.0.0 includes an additional representation of type variables occuring in their own definition:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariableReference&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With Jandex 3.0.0, the second occurence of &lt;code&gt;T&lt;/code&gt; in the example above is represented as &lt;code&gt;TypeVariableReference&lt;/code&gt;.
A reference may be &lt;code&gt;follow()&lt;/code&gt;-ed to obtain the type variable it points to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you use the Jandex &lt;code&gt;Type&lt;/code&gt; hierarchy to represent the Java type system, you will need to adapt your code to handle &lt;code&gt;TypeVariableReference&lt;/code&gt;s.
Typically, processing types is done as a recursive method, in which case you should take care to avoid infinite regress; &lt;code&gt;follow()&lt;/code&gt;-ing a &lt;code&gt;TypeVariableReference&lt;/code&gt; and invoking your method on the resulting &lt;code&gt;TypeVariable&lt;/code&gt; recursively is most likely &lt;strong&gt;not&lt;/strong&gt; what you want.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;changed_indexer_index_return_type&quot;&gt;Changed &lt;code&gt;Indexer.index()&lt;/code&gt; return type&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Indexer.index(InputStream)&lt;/code&gt; method, as well as the &lt;code&gt;indexClass(Class&amp;lt;?&amp;gt;)&lt;/code&gt; method, used to return &lt;code&gt;ClassInfo&lt;/code&gt; of the just-indexed class.
This is convenient, but prevents additional post-processing during &lt;code&gt;Indexer.complete()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Jandex 2.x, there was no such post-processing, but Jandex 3.0.0 adds some.
Notably, post-processing is required for propagating type annotations across nested classes, as well as resolving unresolved type variables across nested classes and patching the resulting type variable references.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; the &lt;code&gt;Indexer.index(InputStream)&lt;/code&gt; and &lt;code&gt;indexClass(Class&amp;lt;?&amp;gt;)&lt;/code&gt; methods now have a return type of &lt;code&gt;void&lt;/code&gt;.
You have to build a complete &lt;code&gt;Index&lt;/code&gt; to be able to obtain a &lt;code&gt;ClassInfo&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; if you create a one-off &lt;code&gt;Indexer&lt;/code&gt; to index a single class, you can simplify your code using &lt;code&gt;Index.singleClass()&lt;/code&gt;.
Note that callers of &lt;code&gt;Indexer.index()&lt;/code&gt; / &lt;code&gt;indexClass()&lt;/code&gt; compiled against Jandex 2.x will continue running, because Jandex 3.0.0 includes a synthetic bridge method for binary compatibility.
That bridge method always returns &lt;code&gt;null&lt;/code&gt; though.
If you want to keep compiling against Jandex 2.x and add compatibility with Jandex 3.0.0, you need to ignore the return value of &lt;code&gt;Indexer.index()&lt;/code&gt; / &lt;code&gt;indexClass()&lt;/code&gt;, or at least handle &lt;code&gt;null&lt;/code&gt; result gracefully.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;class_retained_annotations&quot;&gt;Class-retained annotations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 2.x only indexes annotations with &lt;code&gt;@Retention&lt;/code&gt; of &lt;code&gt;RUNTIME&lt;/code&gt;.
With Jandex 3.0.0, annotations with retention of &lt;code&gt;CLASS&lt;/code&gt; are indexed as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is technically a breaking change, but shouldn&amp;#8217;t really affect anyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; you can distinguish class-retained annotations from runtime-retained by calling &lt;code&gt;AnnotationInstance.runtimeVisible()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;navigation_for_interfaces_and_packages&quot;&gt;Navigation for interfaces and packages&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some methods were added to &lt;code&gt;Index&lt;/code&gt;, and actually to &lt;code&gt;IndexView&lt;/code&gt;, to navigate the interface hierarchy and package structure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getKnownDirectSubinterfaces()&lt;/code&gt;: returns all known direct subinterfaces of the specified interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getAllKnownSubinterfaces()&lt;/code&gt;: returns all known interfaces that extend the given interface, directly and indirectly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getClassesInPackage()&lt;/code&gt;: returns all classes present in given package (but not in subpackages)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getSubpackages()&lt;/code&gt;: returns direct subpackages of given package (but not indirect subpackages)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is a breaking change if you implement the &lt;code&gt;IndexView&lt;/code&gt; interface.
Such implementations typically delegate to some other &lt;code&gt;IndexView&lt;/code&gt;, in which case, adaptation should be straightforward.
Otherwise, consult the javadoc of these methods for more precise description.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 doesn&amp;#8217;t break the behavior of &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; and &lt;code&gt;getAllKnownImplementors()&lt;/code&gt;.
These methods are still inconsistent in that &lt;code&gt;getKnownDirectImplementors()&lt;/code&gt; returns subinterfaces and classes implementing the interface, while &lt;code&gt;getAllKnownImplementors()&lt;/code&gt; only returns classes implementing the interface.
It was tempting to fix this inconsistency, but in the end, we decided it was not worth the potential trouble.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;added_annotationinstance_builder&quot;&gt;Added &lt;code&gt;AnnotationInstance&lt;/code&gt; builder&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To make life of Quarkus extension authors that create their own &lt;code&gt;AnnotationInstance&lt;/code&gt;s easier, we introduced a builder.
The previously existing &lt;code&gt;AnnotationInstance.create()&lt;/code&gt; methods are not going away, they are not even deprecated, they are just more difficult to use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; use &lt;code&gt;AnnotationInstance.builder()&lt;/code&gt; instead of &lt;code&gt;AnnotationInstance.create()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;maven_plugin_changes&quot;&gt;Maven plugin changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned above, the Jandex Maven plugin has been merged into the Jandex codebase.
Moving forward, you won&amp;#8217;t have to track which Jandex Maven plugin version corresponds to which Jandex release: they are released together now and always have the same version number.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are some changes and improvements in the Maven plugin, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, one execution of the Jandex Maven plugin now always produces a single index.
Previously, each file set configured in the Jandex Maven plugin execution produced its own index.
This is counter-intuitive and usually not what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is a breaking change, but shouldn&amp;#8217;t hopefully affect anyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; use multiple executions of the Jandex Maven plugin if you need to produce multiple Jandex indices during Maven build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the file set configuration allows configuring a &lt;em&gt;dependency&lt;/em&gt; in addition to a directory.
This is useful if your artifact should carry an index including not only its own classes, but also classes from some of its dependencies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And lastly, a new goal &lt;code&gt;jandex-jar&lt;/code&gt; was added to the Maven plugin to allow reindexing an already existing JAR.
This is useful for example in combination with shading.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; the Maven plugin is described pretty well in the &lt;a href=&quot;https://smallrye.io/jandex/&quot;&gt;Jandex documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other_smaller_changes&quot;&gt;Other smaller changes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s a few more changes, but those are smaller and less impactful, so we&amp;#8217;ll just describe them briefly here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; the &lt;code&gt;IndexReader.getDataVersion()&lt;/code&gt; method was removed.
To the best of our knowledge, noone has actually ever used it, and the return value was wrong (didn&amp;#8217;t conform to the contract stated in the javadoc).
The &lt;code&gt;getIndexVersion()&lt;/code&gt; method remains intact.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A notion of &lt;em&gt;equivalence&lt;/em&gt; of Jandex objects was added.
This is useful when building more advanced layers on top of Jandex that deal with annotation overlays and similar things.
If you&amp;#8217;re interested, see the &lt;code&gt;EquivalenceKey&lt;/code&gt; class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The method &lt;code&gt;ClassInfo.isInterface()&lt;/code&gt; was added.
It can be used to determine whether given &lt;code&gt;ClassInfo&lt;/code&gt; actually represents an interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.memberClasses()&lt;/code&gt; was added, which returns a set of &lt;code&gt;DotName&lt;/code&gt;s of member classes of given class.
To inspect those member classes more deeply, you need to look them up in an &lt;code&gt;Index&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class &lt;code&gt;JandexReflection&lt;/code&gt; was added, containing some utility methods to load classes corresponding to Jandex &lt;code&gt;ClassInfo&lt;/code&gt; or &lt;code&gt;Type&lt;/code&gt;.
The classes are by default loaded from TCCL, but if there&amp;#8217;s none, the class loader that loaded &lt;code&gt;JandexReflection&lt;/code&gt; itself is used.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.0.0 contains many interesting features and improvements.
This unfortunately required a few breaking changes.
Here&amp;#8217;s the recommended migration path:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Jandex 2.4.3.Final.
This release deprecates some of the methods that are changed in Jandex 3.0.0 and offers replacements.
Notably, this includes &lt;code&gt;ClassInfo.annotations()&lt;/code&gt; (use &lt;code&gt;annotationsMap()&lt;/code&gt; instead) and &lt;code&gt;MethodInfo.parameters()&lt;/code&gt; (use &lt;code&gt;parameterTypes()&lt;/code&gt; instead).
Make sure you don&amp;#8217;t use any deprecated Jandex methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure you don&amp;#8217;t use &lt;code&gt;Indexer.index()&lt;/code&gt;'s or &lt;code&gt;indexClass()&lt;/code&gt;'s return value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At this point, if you compile your code against Jandex 2.4.3.Final, it will most likely run just fine against both 2.4.3.Final and 3.0.0.
Exceptions include: if you implement &lt;code&gt;IndexView&lt;/code&gt; (there are new methods) or if you use the Jandex &lt;code&gt;Type&lt;/code&gt; hierarchy extensively (you&amp;#8217;ll need to handle &lt;code&gt;TypeVariableReference&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade to Jandex 3.0.0.
Configure Maven Enforcer plugin to ban &lt;code&gt;org.jboss:jandex&lt;/code&gt; from getting into your dependency tree.
With the exception of situations listed in the previous item, your code should compile and run without an issue.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profit!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, Jandex also has a new &lt;a href=&quot;https://smallrye.io/jandex/&quot;&gt;documentation site&lt;/a&gt;.
It is currently rather incomplete, but that will hopefully improve over time.
Jandex javadoc was also improved on many places, and remains the go-to reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any exciting ideas for Jandex, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 5.5</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-5/" rel="alternate" type="text/html" title="Fault Tolerance 5.5" /><published>2022-07-11T08:00:00+00:00</published><updated>2022-07-11T08:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-5</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-5/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.5.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.5.0.
This release includes one new feature: support for Micrometer.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.4.x, but note that transitive dependencies have changed a little.
See below for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;micrometer&quot;&gt;Micrometer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance has always supported MicroProfile Metrics.
In this version, we add support for Micrometer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The set of metrics emitted to Micrometer is the same as the set of metrics emitted to MicroProfile Metrics, using the same metric names and tags.
Metric types are also mapped as closely as possible.
More information about that can be found in the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/usage/basic.html#_metrics&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for Micrometer is added mainly for Quarkus, which strives to replace MicroProfile Metrics with Micrometer.
Note that Quarkus does its own integration of SmallRye Fault Tolerance.
The CDI Portable Extension present in SmallRye Fault Tolerance, which other integrators use, still assumes usage of MicroProfile Metrics, and does the integration accordingly.
That is, if you integrate SmallRye Fault Tolerance and are fine with using MicroProfile Metrics, you don&amp;#8217;t have to do anything (except managing dependencies correctly, see below).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;More information about metrics integration is available in the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.5.0/integration/metrics.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;transitive_dependencies&quot;&gt;Transitive dependencies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that in previous versions, depending on SmallRye Fault Tolerance brought in the MicroProfile Metrics API artifact, &lt;code&gt;org.eclipse.microprofile.metrics:microprofile-metrics-api&lt;/code&gt;, transitively.
With the addition of Micrometer support, this is no longer true.
Depending on SmallRye Fault Tolerance 5.5 no longer brings in any metrics dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dependency management has always been a responsibility of integrators.
They now have to make sure the correct metrics API dependency is present, which should typically be rather straightforward.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.4.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.4.1" /><published>2022-06-28T17:00:00+00:00</published><updated>2022-06-28T17:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.1.
This is a small release with a few improvements.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.4.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment-time discovery of methods annotated with &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; was fixed.
This doesn&amp;#8217;t change runtime behavior, because guarded methods that were not discovered during deployment are registered lazily at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some trace-level logging messages were promoted to the debug level, and were enhanced with a description of the guarded method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purpose of upcoming Quarkus dev UI for SmallRye Fault Tolerance, the entire &lt;em&gt;effective&lt;/em&gt; fault tolerance configuration is now visible from outside.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some internal build-related improvements were also made.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-4/" rel="alternate" type="text/html" title="Fault Tolerance 5.4" /><published>2022-03-31T10:00:00+00:00</published><updated>2022-03-31T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-4/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.4.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.4.0.
This release includes several new features and fixes related to the programmatic API.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.x.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reusable_preconfigured_fault_tolerance_strategies&quot;&gt;Reusable, preconfigured fault tolerance strategies&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 5.3.0, we &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;introduced&lt;/a&gt; the programmatic API.
In this release, we augment that with a declarative way of applying programmatically created fault tolerance!
This allows centralizing fault tolerance configuration, as well as sharing fault tolerance state, all in a nice declarative fashion consistent with MicroProfile Fault Tolerance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s demonstrate it with an example.
First, you have to create a bean of type &lt;code&gt;FaultTolerance&lt;/code&gt; with an &lt;code&gt;@Identifier&lt;/code&gt; qualifier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class PreconfiguredFaultTolerance {
    @Produces
    @Identifier(&quot;my-fault-tolerance&quot;)
    public static final FaultTolerance&amp;lt;String&amp;gt; FT = FaultTolerance.&amp;lt;String&amp;gt;create()
            .withRetry().maxRetries(2).done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is customary to create the bean by declaring a &lt;code&gt;static&lt;/code&gt; producer field, which is what we&amp;#8217;ve done here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have that, we can apply &lt;code&gt;my-fault-tolerance&lt;/code&gt; to synchronous methods that return &lt;code&gt;String&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @ApplyFaultTolerance(&quot;my-fault-tolerance&quot;)
    public String doSomething() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.4.0/usage/extra.html#_reusable_preconfigured_fault_tolerance&quot;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;exception_decisions_in_programmatic_api&quot;&gt;Exception decisions in programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The circuit breaker, fallback, and retry fault tolerance strategies allow configuring what happens on certain exceptions.
Both the declarative and programmatic API allow configuring a set of exception classes that are considered expected and unexpected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, the programmatic API also lets you supply a simple exception predicate, which allows expressing more complex exception decisions.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;Callable&amp;lt;String&amp;gt; guarded = FaultTolerance.createCallable(this::action)
        .withFallback().handler(this::fallback).when(e -&amp;gt; e instanceof RuntimeException).done()
        .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of course, the value of this approach is that the predicate may be more complex than a simple &lt;code&gt;instanceof&lt;/code&gt; check.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;support_for_kotlin_suspending_functions&quot;&gt;Support for Kotlin suspending functions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance already supports some asynchronous types on top of the &lt;code&gt;CompletionStage&lt;/code&gt; type mandated by the MicroProfile Fault Tolerance specification.
Specifically, there&amp;#8217;s support for Mutiny and RxJava 3 and more could easily be added if needed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, a new module &lt;code&gt;smallrye-fault-tolerance-kotlin&lt;/code&gt; is added that provides support for Kotlin &lt;code&gt;suspend&lt;/code&gt; functions.
They are also considered asynchronous, so fault tolerance applies across suspension points, like you&amp;#8217;d expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
open class MyService {
    @Retry(maxRetries = 2)
    @Fallback(fallbackMethod = &quot;helloFallback&quot;)
    open suspend fun hello(): String {
        delay(100)
        throw IllegalArgumentException()
    }

    private suspend fun helloFallback(): String {
        delay(100)
        return &quot;hello&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The SmallRye Fault Tolerance documentation of the programmatic API recommends to store &lt;code&gt;FaultTolerance&lt;/code&gt; instances into &lt;code&gt;static&lt;/code&gt; fields.
This has some interesting implications.
Specifically, the entire fault tolerance chain is built in the static initializer, and that includes looking up several beans from the CDI container and possibly even creating a thread.
That is problematic in Quarkus when compiling to a native image, because static initialization code is executed during native image build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release of SmallRye Fault Tolerance, this problem is fixed.
Almost all of the initialization is deferred to runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All in all, upgrading to 5.4.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;re still very much interested in any feedback on the programmatic API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3-2/" rel="alternate" type="text/html" title="Fault Tolerance 5.3.2" /><published>2022-02-14T16:00:00+00:00</published><updated>2022-02-14T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.2&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.2.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;SmallRye Fault Tolerance 5.3&lt;/a&gt;, we revamped the support for additional async types.
During that refactoring, we introduced a bug that manifests in environments with security manager enabled.
In this release, the bug is fixed.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.3.1" /><published>2022-02-10T13:00:00+00:00</published><updated>2022-02-10T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.1.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.3.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-3/&quot;&gt;SmallRye Fault Tolerance 5.3&lt;/a&gt;, we revamped the support for additional async types.
During that refactoring, we introduced a bug that manifests in environments with complex classloading requirements, such as WildFly.
In this release, the bug is fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the programmatic API documentation was slightly improved.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-3/" rel="alternate" type="text/html" title="Fault Tolerance 5.3" /><published>2022-02-08T16:00:00+00:00</published><updated>2022-02-08T16:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-3/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.3.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.3.0.
This release includes one big new feature, the programmatic API, and several smaller additions and fixes.
It should be a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;programmatic_api&quot;&gt;Programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since the very beginning, SmallRye Fault Tolerance has implemented the MicroProfile Fault Tolerance declarative, annotation-based API.
It also has several SmallRye-specific additions to this API, such as retry backoff strategies or circuit breaker maintenance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, SmallRye Fault Tolerance adds an alternative, programmatic API.
It has &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/programmatic-api.html&quot;&gt;extensive documentation&lt;/a&gt;, so we&amp;#8217;ll just provide a short overview here.
Let&amp;#8217;s start with an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
        .withCircuitBreaker().done()
        .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
        .build();

    public String hello() throws Exception {
        return guard.call(externalService::hello);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The important part of this snippet is the &lt;code&gt;guard&lt;/code&gt; variable.
It contains a &lt;code&gt;FaultTolerance&lt;/code&gt; instance, which is basically a configured set of fault tolerance strategies.
The builder API allows creating the same fault tolerance strategies as the annotation-based API of MicroProfile Fault Tolerance.
Order of &lt;code&gt;with*&lt;/code&gt; method invocations doesn&amp;#8217;t matter, the fault tolerance strategies are ordered according to the MicroProfile Fault Tolerance specification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance&lt;/code&gt; interface includes methods to run a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt; and guard them.
That&amp;#8217;s what &lt;code&gt;guard.call(...)&lt;/code&gt; does in the body of the &lt;code&gt;hello&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;FaultTolerance&lt;/code&gt; instance created like this may be used to guard multiple different actions.
If you only need to guard a single action, the previous example can be shortened to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;public class MyService {
    private final Callable&amp;lt;String&amp;gt; guard = FaultTolerance.createCallable(externalService::hello)
            .withCircuitBreaker().done()
            .withFallback().handler(() -&amp;gt; &quot;fallback&quot;).done()
            .build();

    public String hello() throws Exception {
        return guard.call();
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Similarly to the set of &lt;code&gt;FaultTolerance&lt;/code&gt; methods to guard various types of actions, there&amp;#8217;s a set of &lt;code&gt;create*&lt;/code&gt; static methods to create a &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Supplier&lt;/code&gt; or &lt;code&gt;Runnable&lt;/code&gt;. There&amp;#8217;s also a set of &lt;code&gt;createAsync*&lt;/code&gt; static methods to guard asynchronous actions using &lt;code&gt;CompletionStage&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mutiny_support&quot;&gt;Mutiny support&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; artifact, also described below in the section on additional async types, contains a &lt;code&gt;MutinyFaultTolerance&lt;/code&gt; interface.
That interface contains &lt;code&gt;create*&lt;/code&gt; static methods to guard asynchronous actions that return the Mutiny &lt;code&gt;Uni&lt;/code&gt; type.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;events&quot;&gt;Events&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The programmatic API has one feature that the declarative API doesn&amp;#8217;t have: ability to observe certain events.
For example, when configuring a circuit breaker, it is possible to register a callback for circuit breaker state changes or for a situation when an open circuit breaker prevents an invocation.
When configuring a timeout, it is possible to register a callback for when the invocation times out, etc. etc.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;private static final FaultTolerance&amp;lt;String&amp;gt; guard = FaultTolerance.&amp;lt;String&amp;gt;create()
    .withTimeout().duration(5, ChronoUnit.SECONDS).onTimeout(() -&amp;gt; ...).done()
    .build();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;circuit_breaker_maintenance&quot;&gt;Circuit breaker maintenance&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s one exception to the above claim that the declarative API isn&amp;#8217;t able to observe events.
With this release, &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt; gains a method to observe circuit breaker state changes.
No other events are exposed to the declarative API at the moment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that the programmatic API also has a method to obtain &lt;code&gt;CircuitBreakerMaintenance&lt;/code&gt;: &lt;code&gt;FaultTolerance.circuitBreakerMaintenance()&lt;/code&gt;.
This methods returns the same object that you can &lt;code&gt;@Inject&lt;/code&gt;, because circuit breakers created by the programmatic API and declarative API are stored in the same registry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;inspecting_exception_causes&quot;&gt;Inspecting exception causes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@CircuitBreaker&lt;/code&gt;, &lt;code&gt;@Fallback&lt;/code&gt; and &lt;code&gt;@Retry&lt;/code&gt; fault tolerance strategies allow declaring the set of exception types for which the strategy should apply (or be ignored).
When an exception is thrown, its class is checked for presence in one of these sets, and the strategy behaves accordingly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This works fine, until wrapper exceptions come to play.
In certain contexts, the true exceptions are often (or always) wrapped into another exception.
In such situation, configuring when a fault tolerance strategy should apply or be ignored becomes nearly impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, SmallRye Fault Tolerance adds a non-standard feature to solve this problem.
In the &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.3.0/usage/extra.html#_non_compatible_mode&quot;&gt;non-compatible mode&lt;/a&gt;, if the class of the thrown exception isn&amp;#8217;t present in either of the two sets, the cause chain of the exception is inspected automatically.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;revamped_async_types_support&quot;&gt;Revamped async types support&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance offers support for more asynchronous types than just MicroProfile Fault Tolerance mandated &lt;code&gt;CompletionStage&lt;/code&gt;.
So far, that support was based on the SmallRye Reactive Converters project, because that offers conversion between &lt;code&gt;CompletionStage&lt;/code&gt; and other types.
Asynchronous implementations of fault tolerance strategies in SmallRye Fault Tolerance are based on &lt;code&gt;CompletionStage&lt;/code&gt;, so that seems like a natural fit, but it has one issue.
In case the other async type is lazy (which is always the case with RxJava, Mutiny or Reactor), resubscription doesn&amp;#8217;t work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the dependency on SmallRye Reactive Converters is dropped.
Instead, SmallRye Fault Tolerance has its own set of support libraries for various reactive types.
These support libraries convert between types lazily, so resubscription works properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, there&amp;#8217;s &lt;code&gt;smallrye-fault-tolerance-mutiny&lt;/code&gt; for Mutiny and &lt;code&gt;smallrye-fault-tolerance-rxjava3&lt;/code&gt; for RxJava 3. Support for RxJava 1, RxJava 2 and Reactor was dropped, but may easily be added back if there&amp;#8217;s a need.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use &lt;code&gt;@Fallback&lt;/code&gt; with a &lt;code&gt;FallbackHandler&lt;/code&gt; class, you might have found that such fallback handler triggers a validation error when guarding methods that declare a primitive return type (or &lt;code&gt;void&lt;/code&gt;).
This has been fixed.
A &lt;code&gt;FallbackHandler&lt;/code&gt; that declares a wrapper type (such as &lt;code&gt;java.lang.Integer&lt;/code&gt;) now correctly matches a corresponding primitive type (such as &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.3.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!
We&amp;#8217;d be specifically interested in any feedback on the programmatic API.
This is very new, so you have a unique chance to influence its future!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Log4j2 Vulnerability and SmallRye</title><link href="https://www.smallrye.io/blog/log4j2-vulnerability/" rel="alternate" type="text/html" title="Log4j2 Vulnerability and SmallRye" /><published>2021-12-13T12:00:00+00:00</published><updated>2021-12-13T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/log4j2-vulnerability</id><content type="html" xml:base="https://www.smallrye.io/blog/log4j2-vulnerability/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On Thursday (December 9th), a 0-day exploit in the popular Java logging library log4j (version 2) was discovered that
results in Remote Code Execution (RCE) by logging a certain string. Please check the following links for additional
information on this vulnerability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2021-44228&quot;&gt;CVE-2021-44228 Detail&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/advisories/GHSA-jfh8-c2jp-5v3q&quot;&gt;Remote code injection in Log4j&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lunasec.io/docs/blog/log4j-zero-day/&quot;&gt;Log4Shell: RCE 0-day exploit found in log4j 2, a popular Java logging package&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;If you are using &lt;code&gt;log4j2&lt;/code&gt;, or have it available in your runtime we advise you to update it to &lt;code&gt;2.15.0&lt;/code&gt; as soon as
possible.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what_does_this_mean_for_smallrye&quot;&gt;What does this mean for SmallRye?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye libraries do not include or use any &lt;code&gt;log4j&lt;/code&gt; artifacts in their runtime dependencies. Below you can find a
detailed report for each SmallRye dependency (we used the Maven Dependency Plugin to search for possible inclusions):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;smallrye-async-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-context-propagation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-fault-tolerance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-graphql&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-health&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-jwt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-maven-plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-vertx-bindings&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-mutiny-zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-open-api&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentelemetry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-opentracing&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-parent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-converters&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-reactive-messaging&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-safer-annotations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-stork&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;smallrye-testing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/assets/content/2021-12-12-log4j2-report.txt&quot;&gt;SmallRye Dependency Log4j2 Report&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The command used was &lt;code&gt;mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:tree -Dincludes=org.apache.logging.log4j::: -Dverbose&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We were able to find that &lt;code&gt;smallrye-reactive-messaging-kafka&lt;/code&gt; and &lt;code&gt;smallrye-stork-service-discovery-eureka&lt;/code&gt; reference
&lt;code&gt;log4j2&lt;/code&gt; artifacts, but only in the &lt;code&gt;test&lt;/code&gt; scope, so this is not an issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, since all SmallRye projects receive &lt;code&gt;dependabot&lt;/code&gt; updates, we can detect any possible updates to
&lt;code&gt;log4j2&lt;/code&gt; dependencies with the following &lt;a href=&quot;https://github.com/pulls?q=is%3Apr+author%3Aapp%2Fdependabot+user%3Asmallrye+log4j+in%3Atitle&quot;&gt;Github Report&lt;/a&gt;. Indeed, there were two
updates sent by &lt;code&gt;dependabot&lt;/code&gt; to &lt;code&gt;smallrye-mutiny-vertx-bindings&lt;/code&gt;, but these updates target the dependencies of a Maven
plugin execution, so again, not an issue for runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;additional_information&quot;&gt;Additional Information&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if SmallRye itself is not directly affected by this vulnerability, the runtime where you are running may be
compromised. Check if this is the case and upgrade the &lt;code&gt;log4j2&lt;/code&gt; version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Feel free to reach out to the SmallRye team if you experience any issue with any of the SmallRye libraries to
the &lt;a href=&quot;mailto:smallrye@googlegroups.com&quot;&gt;SmallRye Mailing List&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Roberto Cortez</name><email>radcortez@yahoo.com</email></author><category term="log4j2" /><category term="smallrye" /></entry><entry><title type="html">Fault Tolerance 5.2.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2-1/" rel="alternate" type="text/html" title="Fault Tolerance 5.2.1" /><published>2021-07-16T13:00:00+00:00</published><updated>2021-07-16T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.1.
This is a small release with one bug fix.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.2.0.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;/blog/fault-tolerance-5-0/&quot;&gt;SmallRye Fault Tolerance 5.0&lt;/a&gt;, we introduced support for the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations.
From SmallRye Fault Tolerance perspective, these annotations make sense for methods that return an async type, such as &lt;code&gt;CompletionStage&lt;/code&gt; or &lt;code&gt;Uni&lt;/code&gt;.
Naturally, we added validation, so that if the annotation was present on a method with some other return type, deployment would fail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is actually problematic, because these annotations are generic.
They are used by other frameworks and libraries (such as SmallRye Reactive Messaging or RESTEasy Reactive).
In such case, SmallRye Fault Tolerance should just ignore them.
However, if the annotation was present on a method that also applied some fault tolerance annotation, SmallRye Fault Tolerance would run the validation and fail the deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the validation is simply removed.
SmallRye Fault Tolerance can&amp;#8217;t know if the annotation is meant for some other framework or not.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, we fixed some typos in the documentation.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 5.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-5-2/" rel="alternate" type="text/html" title="Fault Tolerance 5.2" /><published>2021-07-02T14:00:00+00:00</published><updated>2021-07-02T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-5-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-5-2/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/5.2.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 5.2.0.
This release includes several new features and fixes.
It is a safe upgrade for everyone using SmallRye Fault Tolerance 5.1.0.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;backoff_strategies_for_retry&quot;&gt;Backoff strategies for &lt;code&gt;@Retry&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Retry&lt;/code&gt; annotation in MicroProfile Fault Tolerance supports a single backoff strategy: constant.
That is, the delay between all retry attempts is identical (with the exception of a random jitter).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance now offers 3 annotations to specify a different backoff strategy:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@ExponentialBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@FibonacciBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@CustomBackoff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of these annotations may be present on a program element annotated &lt;code&gt;@Retry&lt;/code&gt;, and it modifies the retry behavior.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
public class MyService {
    @Retry
    @ExponentialBackoff
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With &lt;code&gt;@ExponentialBackoff&lt;/code&gt;, the delays between retry attempts will grow exponentially.
With &lt;code&gt;@FibonacciBackoff&lt;/code&gt;, the delays will grow per the Fibonacci sequence.
With &lt;code&gt;@CustomBackoff&lt;/code&gt;, it is possible to implement completely custom backoff strategy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_backoff_strategies_for_retry&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;blocking_and_nonblocking_on_classes&quot;&gt;&lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; on classes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, we only documented (and tested) the &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations on methods.
However, these annotations can be placed on classes as well, so in this release, we documented that and tightened some validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, if you addded both of these annotations to the same method, SmallRye Fault Tolerance wouldn&amp;#8217;t complain, even though this is clearly a mistake.
This situation is now detected and application deployment ends with an error.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if one of these annotations is placed on a class and the other on a method, that is a perfectly valid situation.
In such case, the annotation on method has priority over the one on class.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;package com.example;

@ApplicationScoped
@NonBlocking
public class MyService {
    @Retry
    @Blocking
    public void hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;hello&lt;/code&gt; method is treated as &lt;code&gt;@Blocking&lt;/code&gt;, but other methods would inherit the &lt;code&gt;@NonBlocking&lt;/code&gt; annotation from the class.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#blocking-nonblocking&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non_compatible_mode_for_determining_asynchrony&quot;&gt;Non-compatible mode for determining asynchrony&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the &lt;code&gt;@Asynchronous&lt;/code&gt;, &lt;code&gt;@Blocking&lt;/code&gt; and &lt;code&gt;@NonBlocking&lt;/code&gt; annotations, SmallRye Fault Tolerance now offers a mode where method asynchrony is determined solely from the its return type.
This mode is &lt;strong&gt;not compatible&lt;/strong&gt; with the MicroProfile Fault Tolerance specification and doesn&amp;#8217;t pass 2 tests in the TCK.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For that reason, this mode is disabled by default.
To enable it, set the configuration property &lt;code&gt;smallrye.faulttolerance.mp-compatibility&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the non-compatible mode is enabled, methods that have some fault tolerance strategy and return &lt;code&gt;CompletionStage&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; be offloaded to a thread pool, yet will have asynchronous fault tolerance applied automatically.
In other words, they will be treated as if they were annotated &lt;code&gt;@NonBlocking&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code data-lang=&quot;java&quot; class=&quot;language-java hljs&quot;&gt;@ApplicationScoped
public class MyService {
    @Retry
    CompletionStage&amp;lt;String&amp;gt; hello() {
        ...
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;hello&lt;/code&gt; method here will be executed on the original thread (as if it was annotated &lt;code&gt;@NonBlocking&lt;/code&gt;) and will have asynchronous fault tolerance applied.
That is, if the returned &lt;code&gt;CompletionStage&lt;/code&gt; completes with an exception, it will be retried.
(Per the MicroProfile Fault Tolerance specification, retry shouldn&amp;#8217;t happen in such case.
The compatible mode conforms to the specification, but we find that behavior less and less appropriate.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quarkus will enable this mode by default in the 2.1.0.Final release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode&quot;&gt;the documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;others&quot;&gt;Others&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Together with the new features described above, we have also performed a major internal refactoring.
The configuration system, the single last remnant of SmallRye Fault Tolerance 2.x, has been rewritten from scratch.
Instead of storing configuration values into a &lt;code&gt;Map&amp;lt;String, Object&amp;gt;&lt;/code&gt;, the new system is based on configuration interfaces.
Implementations of these interfaces are automatically generated during SmallRye Fault Tolerance build, using an annotation processor.
See &lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/internals/config.html&quot;&gt;the documentation&lt;/a&gt; for more details if you&amp;#8217;re interested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, we have fixed a small bug in &lt;code&gt;@Fallback&lt;/code&gt; validation.
If you had a method guarded with &lt;code&gt;@Fallback&lt;/code&gt; that returned a raw type (such as &lt;code&gt;List&lt;/code&gt;), and its fallback method retured a parameterized type (such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;), the validation code would enter an infinite regress.
This case is now handled properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upgrade to 5.2.0 is very much recommended.
As described above, there are certain new things, so if you encounter any bugs, please let us know in the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;issue tracker&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry></feed>