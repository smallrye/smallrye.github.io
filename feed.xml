<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2024-11-28T16:13:47+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Fault Tolerance 6.7.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-7-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.7.0" /><published>2024-11-28T13:00:00+00:00</published><updated>2024-11-28T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-7-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-7-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.7.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.7.0.
This release contains several big improvements and refactorings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;big_internal_refactoring&quot;&gt;Big Internal Refactoring&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The internal implementations of all fault tolerance strategies up until now had 2 copies: one synchronous and one asynchronous (based on &lt;code&gt;CompletionStage&lt;/code&gt;).
This changes now: all strategies are unified on an asynchronous implementation (based on an internal async type), with a few adjustments for sychronous invocations to support thread interrupts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been done especially for the next feature, which is&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new_programmatic_api&quot;&gt;New Programmatic API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first version of the programmatic API (&lt;code&gt;FaultTolerance&lt;/code&gt;, &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;) was deprecated and scheduled for removal in SmallRye Fault Tolerance 7.0.
The second version (&lt;code&gt;Guard&lt;/code&gt;, &lt;code&gt;TypedGuard&lt;/code&gt;, &lt;code&gt;@ApplyGuard&lt;/code&gt;) is fairly similar, but has some important differences too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparison of &lt;code&gt;FaultTolerance&lt;/code&gt;, &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;TypedGuard&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;Guard&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;typed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;typed&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;not typed&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does &lt;em&gt;not&lt;/em&gt; allow fallback&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows casting, but only if there is no fallback&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does &lt;em&gt;not&lt;/em&gt; allow casting&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no casting is necessary, target type has to be specified for each call&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not allow using synchronous &lt;code&gt;FaultTolerance&lt;/code&gt; to guard asynchonous actions et vice versa&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not allow casting&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;allows guarding any type&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;created using &lt;code&gt;create()&lt;/code&gt; or &lt;code&gt;createAsync()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;only &lt;code&gt;create()&lt;/code&gt;, but it needs the target type (which may be sync or async)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;only &lt;code&gt;create()&lt;/code&gt;; the &lt;code&gt;call()&lt;/code&gt; method needs the target type (which may be sync or async)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comparison of &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; and &lt;code&gt;@ApplyGuard&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;code&gt;@ApplyGuard&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the &lt;code&gt;value()&lt;/code&gt; points to a bean of type &lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the &lt;code&gt;value()&lt;/code&gt; points to a bean of type &lt;code&gt;Guard&lt;/code&gt; or &lt;code&gt;TypedGuard&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ignores all other fault tolerance annotations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;supports &lt;code&gt;@Fallback&lt;/code&gt; and thread offload (&lt;code&gt;@Asynchronous&lt;/code&gt;, &lt;code&gt;@AsynchronousNonBlocking&lt;/code&gt;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;does not support Kotlin &lt;code&gt;suspend&lt;/code&gt; functions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;supports Kotlin &lt;code&gt;suspend&lt;/code&gt; functions&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more information about migrating to the new programmatic API, see the migration guides:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.7.0/reference/programmatic-api.html#migration_from_faulttolerance&quot;&gt;Migration from &lt;code&gt;FaultTolerance&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://smallrye.io/docs/smallrye-fault-tolerance/6.7.0/reference/reusable.html#migration_from_applyfaulttolerance&quot;&gt;Migration from &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the &lt;code&gt;MutinyFaultTolerance&lt;/code&gt; API has no replacement.
The &lt;code&gt;Guard&lt;/code&gt; and &lt;code&gt;TypedGuard&lt;/code&gt; APIs support &lt;code&gt;Uni&lt;/code&gt; out of the box, if the Mutiny support library is present.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new_configuration_properties&quot;&gt;New Configuration Properties&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Support for new configuration properties was added.
The existing, MicroProfile Fault Tolerance-defined configuration still works, but the new configuration is properly scoped and looks more natural:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Existing config property&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New config property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;/&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.&quot;&amp;lt;classname&amp;gt;/&amp;lt;methodname&amp;gt;&quot;.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;classname&amp;gt;/&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.&quot;&amp;lt;classname&amp;gt;&quot;.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&amp;lt;annotation&amp;gt;/&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.global.&amp;lt;annotation&amp;gt;.&amp;lt;member&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;MP_Fault_Tolerance_NonFallback_Enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;MP_Fault_Tolerance_Metrics_Enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;smallrye.faulttolerance.metrics.enabled&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All the &lt;code&gt;&amp;lt;annotation&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;member&amp;gt;&lt;/code&gt; parts are changed from camel case
(&lt;code&gt;BeforeRetry&lt;/code&gt;, &lt;code&gt;methodName&lt;/code&gt;) to kebab case (&lt;code&gt;before-retry&lt;/code&gt;, &lt;code&gt;method-name&lt;/code&gt;).
Two annotation members are special cased to improve consistency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Retry/durationUnit&lt;/code&gt; moves to &lt;code&gt;retry.max-duration-unit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Retry/jitterDelayUnit&lt;/code&gt; moves to &lt;code&gt;retry.jitter-unit&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These new configuration properties exist especially for Quarkus, where they will look Quarkus-native: instead of the &lt;code&gt;smallrye.faulttolerance&lt;/code&gt; prefix, they will start with &lt;code&gt;quarkus.fault-tolerance&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nothing should change externally, this release should be fully backward compatible.
But please do pay extra attention.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And as usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.6.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-3/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.3" /><published>2024-11-19T13:00:00+00:00</published><updated>2024-11-19T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.3&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.3.
This release contains one small improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Individual metric providers can now be disabled.
To do that, set the following configuration properties (as in MicroProfile Config) to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;smallrye.faulttolerance.mpmetrics.disabled&lt;/code&gt; to disable MicroProfile Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;smallrye.faulttolerance.opentelemetry.disabled&lt;/code&gt; to disable OpenTelemetry Metrics&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;smallrye.faulttolerance.micrometer.disabled&lt;/code&gt; to disable Micrometer&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These properties complement the global &lt;code&gt;MP_Fault_Tolerance_Metrics_Enabled&lt;/code&gt; property, which can be set to &lt;code&gt;false&lt;/code&gt; to disable metrics altogether.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that setting &lt;code&gt;smallrye.faulttolerance.*.disabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; mean the provider is enabled unconditionally.
When that provider is not discovered or selected by the integrator, it cannot be enabled in any way.
These properties are only meant for disabling an otherwise enabled metrics provider; not the other way around.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.6.2</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-2/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.2" /><published>2024-11-14T11:00:00+00:00</published><updated>2024-11-14T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-2</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.2&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.2.
This release contains two small bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@BeforeRetry&lt;/code&gt; annotation didn&amp;#8217;t work correctly when guarding asynchronous actions (returning &lt;code&gt;CompletionStage&lt;/code&gt;, &lt;code&gt;Uni&lt;/code&gt; etc.).
This bug has been fixed in this release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The support for multiple metric providers was fixed to work properly in EE environments like WildFly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.6.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.1" /><published>2024-10-29T10:00:00+00:00</published><updated>2024-10-29T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.1.
This release contains one small bugfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CDI extension in SmallRye Fault Tolerance (&lt;code&gt;FaultToleranceExtension&lt;/code&gt;) was changed in SmallRye Fault Tolerance 6.5.0 to support multiple metric providers at the same time.
This support wasn&amp;#8217;t functioning properly in case the metrics classes for given provider were present, but the dependencies on required beans were not satisfied.
In this release, all the metric providers now depend on the required beans lazily (by injecting &lt;code&gt;Provider&lt;/code&gt; of given class, instead of the class directly).
This, together with some refactoring from field injection to constructor injection for simplification, fixes the issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.6.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-6-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.6.0" /><published>2024-10-24T14:00:00+00:00</published><updated>2024-10-24T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-6-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-6-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.6.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.6.0.
This release contains two small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until now, all &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; methods that used the same identifier were collapsed into the same metrics, using the &lt;code&gt;FaultTolerance&lt;/code&gt; description as the &lt;code&gt;method&lt;/code&gt; tag.
With this release, &lt;code&gt;@ApplyFaultTolerance&lt;/code&gt; methods have split metrics, where the &lt;code&gt;method&lt;/code&gt; tag is the classic &lt;code&gt;&amp;lt;fully qualified class name&amp;gt;.&amp;lt;method name&amp;gt;&lt;/code&gt; format, even though they still share the same &lt;code&gt;FaultTolerance&lt;/code&gt; object and therefore the bulkhead / circuit breaker / rate limit state.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;FaultTolerance.BulkheadBuilder.enableVirtualThreadsQueueing()&lt;/code&gt; method was added.
With this method, it is possible to use bulkhead queueing even with synchronous bulkhead, but there&amp;#8217;s an important limitation: the &lt;code&gt;FaultTolerance&lt;/code&gt; guard must be executed on virtual threads.
This is not checked; it is something you have to provide yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.3</title><link href="https://www.smallrye.io/blog/jandex-3-2-3/" rel="alternate" type="text/html" title="Jandex 3.2.3" /><published>2024-10-24T13:00:00+00:00</published><updated>2024-10-24T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-3</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.3&quot;&gt;release&lt;/a&gt; of Jandex 3.2.3.
This release contains one small bugfix and one small improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Type.parse()&lt;/code&gt; method was added.
This method parses a string (according to a documented grammar) and produces a Jandex &lt;code&gt;Type&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;Index.singleClass()&lt;/code&gt; method now works properly when the passed class object in fact represents a module descriptor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.5.0</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-5-0/" rel="alternate" type="text/html" title="Fault Tolerance 6.5.0" /><published>2024-10-11T11:00:00+00:00</published><updated>2024-10-11T11:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-5-0</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-5-0/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.5.0&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.5.0.
This release implements MicroProfile Fault Tolerance 4.1 and contains several new features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only new feature of MicroProfile Fault Tolerance 4.1 is support for OpenTelemetry / MicroProfile Telemetry, specifically for exposing metrics.
Since SmallRye Fault Tolerance has already included support for MicroProfile Metrics and Micrometer, adding a third implementation was a no-brainer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to that, SmallRye Fault Tolerance 6.5.0 resolves fallback methods (&lt;code&gt;@Fallback.fallbackMethod()&lt;/code&gt;) and before-retry methods (&lt;code&gt;@BeforeRetry.methodName()&lt;/code&gt;) statically.
That is, instead of resolving the methods when the fault tolerance operation is being constructed, the methods are resolved during deployment.
This makes no difference in regular environments like WildFly, but in Quarkus, where deployment happens at build time, this is a significant change.
It allows proper native image compilation, and it is also a breaking change on the configuration front.
The configuration of fallback methods and before-retry methods is now build-time only, and cannot be changed at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in this version, the &lt;code&gt;FaultTolerance.cast()&lt;/code&gt; and &lt;code&gt;castAsync()&lt;/code&gt; methods were added.
These methods return the same instance of &lt;code&gt;FaultTolerance&lt;/code&gt;, but casted to guard a different type.
This is often safe, but cannot happen when fallback is defined; in that case, these methods throw an exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.4.1</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-4-1/" rel="alternate" type="text/html" title="Fault Tolerance 6.4.1" /><published>2024-09-27T14:00:00+00:00</published><updated>2024-09-27T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-4-1</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-4-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.4.1&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.4.1.
This release contains two bugfixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In SmallRye Fault Tolerance 6.3.0, the &lt;code&gt;ThreadTimer&lt;/code&gt; internal class was made a singleton.
That was a mistake, because that prevents 2 deployments using SmallRye Fault Tolerance in the same application server (such as WildFly).
The second deployment would get an &lt;code&gt;IllegalStateException&lt;/code&gt; with the message of &lt;em&gt;Timer already exists&lt;/em&gt;.
The mistake was fixed and there can be multiple instances of the timer once again.
The instances of the timer are distinguished by an opaque identifier, which is also exposed via metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the search for fallback methods (&lt;code&gt;@Fallback.fallbackMethod()&lt;/code&gt;), as well as before-retry methods (&lt;code&gt;@BeforeRetry.methodName()&lt;/code&gt;), was fixed to also include methods from inherited interfaces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.2.2</title><link href="https://www.smallrye.io/blog/jandex-3-2-2/" rel="alternate" type="text/html" title="Jandex 3.2.2" /><published>2024-08-08T13:00:00+00:00</published><updated>2024-08-08T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.2&quot;&gt;release&lt;/a&gt; of Jandex 3.2.2.
This release contains several small improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo.canonicalRecordConstructor()&lt;/code&gt; method was added.
This method returns a canonical constructor for records as a &lt;code&gt;MethodInfo&lt;/code&gt;.
For other kinds of classes, it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, the &lt;code&gt;ClassInfo.unsorted*&lt;/code&gt; methods were renamed, because the old name is not exactly intuitive.
The old methods still exist, but are deprecated.
The new methods are:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Old method&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;New method&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedFields()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;fieldsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedMethods()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;methodsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;unsortedRecordComponents()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;recordComponentsInDeclarationOrder()&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The javadoc of the &lt;code&gt;fields()&lt;/code&gt;, &lt;code&gt;methods()&lt;/code&gt; and &lt;code&gt;recordComponents()&lt;/code&gt; methods was improved to point out that there is no guaranteed order in their return values.
There is also a link to the &lt;code&gt;*InDeclarationOrder()&lt;/code&gt; methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.2.1</title><link href="https://www.smallrye.io/blog/jandex-3-2-1/" rel="alternate" type="text/html" title="Jandex 3.2.1" /><published>2024-07-29T09:00:00+00:00</published><updated>2024-07-29T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-2-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-2-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.2.1&quot;&gt;release&lt;/a&gt; of Jandex 3.2.1.
This release contains several small improvements and bug fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All annotations in the annotation overlay (introduced in &lt;a href=&quot;/blog/jandex-3-2-0&quot;&gt;Jandex 3.2.0&lt;/a&gt;) are now guaranteed to have a target.
This was previously not the case for annotations added by the user, but with this release, all annotations added by the user that don&amp;#8217;t have a target yet are assigned a target automatically.
Also, the &lt;code&gt;AnnotationOverlay&lt;/code&gt; javadoc was improved slightly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ClassInfo&lt;/code&gt; class will no longer hold an empty or single-element &lt;code&gt;HashMap&lt;/code&gt;.
Instead, a &lt;code&gt;Collections.emptyMap()&lt;/code&gt; or &lt;code&gt;Collections.singletonMap()&lt;/code&gt; are used, making Jandex memory consumption better.
Thanks Guillaume Smet for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jandex-jar&lt;/code&gt; goal of the Jandex Maven plugin has gained an &lt;code&gt;indexVersion&lt;/code&gt; parameter.
This parameter was already present on the &lt;code&gt;jandex&lt;/code&gt; goal, so this increases feature parity.
Thanks Martin Hickson for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry></feed>