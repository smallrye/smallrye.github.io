<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="https://www.smallrye.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.smallrye.io/" rel="alternate" type="text/html" /><updated>2024-03-14T11:12:23+00:00</updated><id>https://www.smallrye.io/feed.xml</id><title type="html">SmallRye</title><subtitle>SmallRye is a project to share and collaborate on implementing specifications that are part of Eclipse MicroProfile.</subtitle><entry><title type="html">Jandex 3.1.7</title><link href="https://www.smallrye.io/blog/jandex-3-1-7/" rel="alternate" type="text/html" title="Jandex 3.1.7" /><published>2024-03-14T09:00:00+00:00</published><updated>2024-03-14T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-7</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-7/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.7&quot;&gt;release&lt;/a&gt; of Jandex 3.1.7.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few utility methods are added to improve quality of life:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Type.create(Class)&lt;/code&gt; to create a &lt;code&gt;Type&lt;/code&gt; object from &lt;code&gt;java.lang.Class&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PrimitiveType.box()&lt;/code&gt; and &lt;code&gt;unbox()&lt;/code&gt; static methods for converting between primitive types and primitive wrapper classes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two bugs were fixed in &lt;code&gt;AnnotationInstanceBuilder&lt;/code&gt; when adding class-valued members:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if given a &lt;code&gt;Class&lt;/code&gt; object, it was always assumed that it represents a class type; the &lt;code&gt;void&lt;/code&gt; pseudo-type, primitive types and array types were not handled correctly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;if given a &lt;code&gt;Type&lt;/code&gt; object that represents a multi-dimensional array, it was incorrectly rejected&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A bug was fixed in sorting classes during type annotation propagation.
Similar problem was already fixed before, but it turned out that with bytecode obfuscation, the previous fix was not effective.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, some dependencies of the Jandex Maven plugin were updated, mainly to fix a possible issue with indexing reproducibility.
Thanks Jorge Solórzano for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.6</title><link href="https://www.smallrye.io/blog/jandex-3-1-6/" rel="alternate" type="text/html" title="Jandex 3.1.6" /><published>2023-11-27T13:00:00+00:00</published><updated>2023-11-27T13:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-6</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.6&quot;&gt;release&lt;/a&gt; of Jandex 3.1.6.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1.3 &lt;a href=&quot;/blog/jandex-3-1-3/&quot;&gt;introduced&lt;/a&gt; the notion of annotation equivalence in the form of the &lt;code&gt;AnnotationInstance.equivalentTo()&lt;/code&gt; method.
This method is like &lt;code&gt;equals()&lt;/code&gt;, except it ignores the annotation target.
In this release, annotation equivalence is expanded with the introduction of &lt;code&gt;equivalenceHashCode()&lt;/code&gt;, a &lt;code&gt;hashCode()&lt;/code&gt;-like method that is consistent with &lt;code&gt;equivalentTo()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further, &lt;code&gt;AnnotationInstance&lt;/code&gt; also gains a method &lt;code&gt;createEquivalenceProxy()&lt;/code&gt; which returns an &lt;code&gt;AnnotationInstanceEquivalenceProxy&lt;/code&gt;.
An &lt;em&gt;equivalence proxy&lt;/em&gt; is an object whose &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; implement equivalence (instead of equality) by delegating to &lt;code&gt;equivalentTo()&lt;/code&gt; and &lt;code&gt;equivalenceHashCode()&lt;/code&gt;.
As opposed to an &lt;em&gt;equivalence key&lt;/em&gt;, an equivalence proxy also provides access to the delegate &lt;code&gt;AnnotationInstance&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release also fixes a NPE that could be observed when indexing certain classes that include the &lt;code&gt;Signature&lt;/code&gt; attribute on fields.
The JVM Specification says that field signatures are always reference type signatures, which is what the signature parser in Jandex assumed.
As it turns out, there are classes out there, in the wild, that use a primitive type signature as a field signature.
That would manifest as a NPE in previous Jandex releases, but this release accomodates this possibility.
Thanks Václav Muzikář for the issue report and reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, in this release, Jandex provides somewhat nicer error message in case the parsed &lt;code&gt;.class&lt;/code&gt; file is not in fact a valid JVM class file and does not begin with the expected magic value.
Previously, the error message was just &lt;code&gt;Invalid Magic&lt;/code&gt;, which is funny but not very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.5</title><link href="https://www.smallrye.io/blog/jandex-3-1-5/" rel="alternate" type="text/html" title="Jandex 3.1.5" /><published>2023-09-22T10:00:00+00:00</published><updated>2023-09-22T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-5</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-5/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.5&quot;&gt;release&lt;/a&gt; of Jandex 3.1.5.
This release contains two small fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex heavily relies on interning (structural sharing) of objects for memory and storage efficiency.
If there&amp;#8217;s a lot of elements (such as fields) in the index that look basically the same (have the same name and type), you can be fairly sure that there will be just one instance representing them all.
When those elements are annotated and all the annotations also look basically the same, one might expect that the objects will still be shared.
Alas, that is not the case.
The &lt;code&gt;AnnotationInstance&lt;/code&gt; representation of annotations includes the &lt;em&gt;annotation target&lt;/em&gt; (the element that is annotated) and that &lt;code&gt;target&lt;/code&gt; is considered for annotation equality (&lt;code&gt;AnnotationInstance.equals()&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since interning is implemented using a hash table, objects that are &quot;basically the same&quot; but are not equal better have different hash codes, otherwise hash collisions will slow down indexing fairly significantly if there are many such objects.
Unfortunately, even though &lt;code&gt;AnnotationInstance.equals()&lt;/code&gt; considers the &lt;code&gt;target&lt;/code&gt; for equality, &lt;code&gt;AnnotationInstance.hashCode()&lt;/code&gt; simply ignores it.
This means that the significant indexing slowdowns actually may easily happen in practice.
This releases fixes that by including the annotation target in the &lt;code&gt;AnnotationInstance&lt;/code&gt; hash code, making collisions a lot less likely.
Thanks Aaron Ogburn for finding the issue!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the Maven plugin configuration option &lt;code&gt;&amp;lt;indexName&amp;gt;&lt;/code&gt; also accepts (relative) paths instead of just file names.
This was supported in previous versions of the Jandex Maven plugin, but was dropped in Jandex 3.0.0 with the introduction of &lt;code&gt;&amp;lt;indexDir&amp;gt;&lt;/code&gt;.
Thanks Ryan Lubke for the report!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.3</title><link href="https://www.smallrye.io/blog/jandex-3-1-3/" rel="alternate" type="text/html" title="Jandex 3.1.3" /><published>2023-08-28T10:00:00+00:00</published><updated>2023-08-28T10:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-3</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.3&quot;&gt;release&lt;/a&gt; of Jandex 3.1.3.
This release contains several small fixes and improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AnnotationInstance.equivalentTo()&lt;/code&gt; method was added that establishes the notion of &lt;em&gt;annotation equivalence&lt;/em&gt;.
Two annotation instances are equivalent if they have the same name (that is, the same annotation interface) and the same members.
The target of the annotation is ignored (unlike the &lt;code&gt;equals()&lt;/code&gt; method).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo.isStaticInitializer()&lt;/code&gt; method was added to distinguish the special &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt; methods (similarly to existing &lt;code&gt;isConstructor()&lt;/code&gt;, which distinguishes the special &lt;code&gt;&amp;lt;init&amp;gt;&lt;/code&gt; methods).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Serialization compatibility with Jandex 2 was restored.
Jandex 3 added a new kind of types, type variable references, and at that time, the index serialization code was not adjusted properly.
Therefore, if Jandex 3 was asked to write an index of an older version, for consumption by Jandex 2, the result in fact was not readable by Jandex 2.
The fix is fortunately simple, because what Jandex 3 represents as a type variable reference, Jandex 2 always represents as an unresolved type variable.
So when emitting an index for Jandex 2, Jandex 3 can just serialize type variable references as unresolved type variables.
(Note that Jandex 3 may still produce unresolved type variables, for example when indexing an incomplete class path.)
Thanks Andrey Manzharov for the reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Jandex Maven plugin now supports setting the index version that should be produced.
That way, you can upgrade your Jandex version yet keep the persistent index readable by older Jandex versions.
Of course, if the upgraded Jandex has a newer persistent index format that includes more information, the older version will &lt;em&gt;not&lt;/em&gt; contain the new information.
Thanks Andrey Manzharov for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;jandex-jar&lt;/code&gt; goal of the Jandex Maven plugin was improved to not omit directory entries in the resulting JAR.
Thanks Hui Wang for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, multiple places in Jandex were changed to slightly reduce allocations.
Instead of allocating a regular &lt;code&gt;java.util.ArrayList&lt;/code&gt; and then an immutable wrapper, an immutable array-backed &lt;code&gt;List&lt;/code&gt; implementation is used directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.2.6</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-6/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.6" /><published>2023-07-25T12:00:00+00:00</published><updated>2023-07-25T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-6</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-6/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.6&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.6.
This is a tiny release with one fix for Maven users that enable strict checksum validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SmallRye Fault Tolerance uses Arquillian to run the MicroProfile Fault Tolerance TCK.
To do that, it imports the Arquillian BOM for managing dependency versions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Arquillian 1.7.0 has unfortunately made a mistake in deploying checksums to Maven Central, and since SmallRye Fault Tolerance imports the Arquillian BOM in its &lt;em&gt;root&lt;/em&gt; POM, all Maven users that enable strict checksum validation and depend on SmallRye Fault Tolerance directly or transitively will observe checksum validation failures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, the problem is fixed by no longer importing the Arquillian BOM in the root POM; instead, all the Arquillian dependency versions are managed by the TCK module.
The TCK module is not something people can depend on; for a while, we haven&amp;#8217;t even been releasing its binary to Maven Central.
Therefore, the scope of checksum validation failures is greatly reduced&amp;#8201;&amp;#8212;&amp;#8201;they can only happen in the SmallRye Fault Tolerance project itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small fix for the circuit breaker state diagram in the documentation is also included.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Fault Tolerance 6.2.4</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-4/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.4" /><published>2023-06-21T12:00:00+00:00</published><updated>2023-06-21T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-4</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-4/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.4&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.4.
This is a tiny release with one bugfix for Micrometer integration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a gauge is registered with Micrometer, a &lt;em&gt;state object&lt;/em&gt; is passed to Micrometer along with a &lt;em&gt;value extraction function&lt;/em&gt;.
That value extraction function is supposed to extract the actual gauge value from the state object.
In SmallRye Fault Tolerance, the state object is a &lt;code&gt;Supplier&lt;/code&gt; and the value extraction function just calls the &lt;code&gt;get&lt;/code&gt; method on the &lt;code&gt;Supplier&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The issue is that Micrometer only holds onto the state object weakly (using &lt;code&gt;WeakReference&lt;/code&gt;).
If the state object is GC-ed, Micrometer will report &lt;code&gt;NaN&lt;/code&gt; as the gauge value.
Since the &lt;code&gt;Supplier&lt;/code&gt; in SmallRye Fault Tolerance is not used anywhere else, gauges typically don&amp;#8217;t report the proper value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this release, we make sure that the &lt;code&gt;Supplier&lt;/code&gt;s do not become garbage, so gauges work correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, a test for fault tolerance on interface-based beans was simplified, together with the implementation of RestClient interface-based beans in RESTEasy MicroProfile (which is what this test mimics).
Thanks Matěj Novotný for the PR!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.2</title><link href="https://www.smallrye.io/blog/jandex-3-1-2/" rel="alternate" type="text/html" title="Jandex 3.1.2" /><published>2023-06-08T14:00:00+00:00</published><updated>2023-06-08T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-2</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-2/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.2&quot;&gt;release&lt;/a&gt; of Jandex 3.1.2.
It includes a significant internal refactoring of method parameter names and synthetic parameters handling, as well as one small API improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JDK 18 and JDK 21 made some changes in &lt;code&gt;javac&lt;/code&gt; that required refactoring of how synthetic/mandated parameters and parameters names are handled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8271623&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8271623&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8292275&quot; class=&quot;bare&quot;&gt;https://bugs.openjdk.org/browse/JDK-8292275&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this release, method parameter handling is more robust.
Thanks Christian Beikov for the bug report and reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;MethodInfo&lt;/code&gt; class now exposes the &lt;code&gt;isDefault()&lt;/code&gt; and &lt;code&gt;isBridge()&lt;/code&gt; methods:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isDefault()&lt;/code&gt; returns whether the method is a &lt;code&gt;default&lt;/code&gt; method declared on an interface&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isBridge()&lt;/code&gt; returns whether the method is a synthetic bridge method&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks Martin Kouba for the pull request!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Fault Tolerance 6.2.3</title><link href="https://www.smallrye.io/blog/fault-tolerance-6-2-3/" rel="alternate" type="text/html" title="Fault Tolerance 6.2.3" /><published>2023-05-26T12:00:00+00:00</published><updated>2023-05-26T12:00:00+00:00</updated><id>https://www.smallrye.io/blog/fault-tolerance-6-2-3</id><content type="html" xml:base="https://www.smallrye.io/blog/fault-tolerance-6-2-3/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/releases/tag/6.2.3&quot;&gt;release&lt;/a&gt; of SmallRye Fault Tolerance 6.2.3.
This is a tiny release with one bugfix for Kotlin users.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;@Fallback&lt;/code&gt; annotation allows specifying 2 kinds of fallbacks: fallback methods and fallback handlers.
Fallback method, as defined by MicroProfile Fault Tolerance, must have the same parameters as the guarded method.
SmallRye Fault Tolerance has an improvement: the fallback method may declare an additional parameter of an exception type, which must be present at the very end of the parameter list.
This doesn&amp;#8217;t work correctly for Kotlin &lt;code&gt;suspend&lt;/code&gt; functions, because &lt;code&gt;suspend&lt;/code&gt; functions always have a &lt;code&gt;Continuation&lt;/code&gt; parameter at the end of the parameter list.
Therefore, a fallback method with an additional exception parameter, which is also a Kotlin &lt;code&gt;suspend&lt;/code&gt; function, isn&amp;#8217;t found correctly.
This release fixes the bug and &lt;code&gt;suspend&lt;/code&gt; functions may be used as fallback methods just fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, with this release, we made a small reordering of sections in the reference guides.
The section on interactions with other strategies is now always present right after the description section, so that it&amp;#8217;s more visible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As usual, if you have any ideas for improvements, please &lt;a href=&quot;https://github.com/smallrye/smallrye-fault-tolerance/issues&quot;&gt;file an issue&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /><category term="microprofile" /></entry><entry><title type="html">Jandex 3.1.1</title><link href="https://www.smallrye.io/blog/jandex-3-1-1/" rel="alternate" type="text/html" title="Jandex 3.1.1" /><published>2023-04-13T09:00:00+00:00</published><updated>2023-04-13T09:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-1</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-1/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.1&quot;&gt;release&lt;/a&gt; of Jandex 3.1.1.
It includes one small improvement and one small bug fix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As part of the effort to make creating instances of &lt;code&gt;Type&lt;/code&gt; easier for Jandex users, this release makes the &lt;code&gt;VoidType.VOID&lt;/code&gt; constant &lt;code&gt;public&lt;/code&gt;.
To obtain an instance of &lt;code&gt;VoidType&lt;/code&gt;, it is no longer necessary to use &lt;code&gt;Type.create()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previous release attempted to make the indexing process reproducible, but didn&amp;#8217;t succeed entirely.
In case an indexed class contains a recursive type parameter, which is relatively common, indexing in fact wasn&amp;#8217;t reproducible due to the unnecessary usage of &lt;code&gt;System.identityHashCode()&lt;/code&gt;.
This release fixes that.
Thanks Alexey Loubyansky for providing a reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry><entry><title type="html">Jandex 3.1.0</title><link href="https://www.smallrye.io/blog/jandex-3-1-0/" rel="alternate" type="text/html" title="Jandex 3.1.0" /><published>2023-04-06T14:00:00+00:00</published><updated>2023-04-06T14:00:00+00:00</updated><id>https://www.smallrye.io/blog/jandex-3-1-0</id><content type="html" xml:base="https://www.smallrye.io/blog/jandex-3-1-0/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today, we announce the &lt;a href=&quot;https://github.com/smallrye/jandex/releases/tag/3.1.0&quot;&gt;release&lt;/a&gt; of Jandex 3.1.0.
It includes several improvements and bug fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;declarations&quot;&gt;Declarations&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The top-level interface in the Jandex object model has always been an &lt;code&gt;AnnotationTarget&lt;/code&gt;: something that can be annotated.
There are generally two kinds of things that can be annotated, speaking in Java terms: declarations and types (or type usages, to be more precise).
This distinction hasn&amp;#8217;t been reflected in the Jandex object model hierarchy, until now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1 adds the &lt;code&gt;Declaration&lt;/code&gt; interface, which directly extends &lt;code&gt;AnnotationTarget&lt;/code&gt;.
All classes that represent declarations now implement &lt;code&gt;Declaration&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FieldInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MethodInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MethodParameterInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RecordComponentInfo&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The only &lt;code&gt;AnnotationTarget&lt;/code&gt; that isn&amp;#8217;t &lt;code&gt;Declaration&lt;/code&gt; is:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeTarget&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;EquivalenceKey&lt;/code&gt; hierarchy also has a &lt;code&gt;DeclarationEquivalenceKey&lt;/code&gt;, so that it corresponds to the &lt;code&gt;AnnotationTarget&lt;/code&gt; hierarchy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a small change that should significantly improve usage of Jandex as a language model.
It is very common to only care about annotated declarations, but for now, there hasn&amp;#8217;t been a way to distinguish them from annotated type usages.
The &lt;code&gt;Declaration&lt;/code&gt; interface serves this very purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;factories_and_builders_for_types&quot;&gt;Factories and builders for types&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are different ways to instantiate a Jandex &lt;code&gt;Type&lt;/code&gt;.
The &lt;code&gt;Type.create()&lt;/code&gt; static method is not very easy to use, and the concrete subclasses of &lt;code&gt;Type&lt;/code&gt; over time accumulated different static factory methods as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex 3.1 adds a comprehensive set of static factory methods and builders to all complex &lt;code&gt;Type&lt;/code&gt;s:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClassType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ParameterizedType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TypeVariable&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WildcardType&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All these classes have a set of static factory methods called &lt;code&gt;create()&lt;/code&gt;, sufficient for the most common cases.
They also have a static method called &lt;code&gt;builder()&lt;/code&gt; that returns a builder, usable for the less common cases, including type annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;array_types_representation&quot;&gt;Array types representation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;ArrayType&lt;/code&gt; class in Jandex models Java array types.
The Jandex representation, incidentally, is very different from the Java language representation, yet has always used the same terminology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quick refresher: in Java, array types have a component type and an element type.
For example, in case of &lt;code&gt;int[][]&lt;/code&gt;, the element type is &lt;code&gt;int&lt;/code&gt;, while the component type is &lt;code&gt;int[]&lt;/code&gt; (whose component type is &lt;code&gt;int&lt;/code&gt;).
In Jandex, &lt;code&gt;int[][]&lt;/code&gt; has always been represented as a tuple: &lt;code&gt;{ componentType = int, dimensions = 2 }&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This shows the first issue: conflicting terminology.
The term &lt;em&gt;component type&lt;/em&gt; in Jandex has always meant something else than in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s not everything, though.
To faithfully represent type annotations on the dimensions of the array, Jandex sometimes has to use an array type as the component type of an array type.
For example, the type &lt;code&gt;String[] @Ann []&lt;/code&gt; has to be represented as an array with 1 dimension, whose component type is an array type &lt;code&gt;String @Ann []&lt;/code&gt;.
The component type of that, in turn, is &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, this is completely different from the Java representation.
This is usually not a big deal, because annotations on array dimensions are rare and multi-dimensional arrays are significantly less common than single-dimensional, but it still causes confusion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the release of Jandex 3.1, this is no more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What Jandex used to call &lt;em&gt;component type&lt;/em&gt; of an array is now named &lt;em&gt;constituent type&lt;/em&gt;.
To access the Jandex representation, the following methods exist:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;constituent()&lt;/code&gt;: this method is new&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dimensions()&lt;/code&gt;: this method has existed before and hasn&amp;#8217;t been changed to avoid breaking compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Methods to access the Java representation of array types are added:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;elementType()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;componentType()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;deepDimensions()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One method has been deprecated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;component()&lt;/code&gt;: this method has existed before and hasn&amp;#8217;t been changed to avoid breaking compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;reconstructing_descriptors_and_generic_signatures&quot;&gt;Reconstructing descriptors and generic signatures&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Advanced users of Jandex, such as Quarkus, sometimes have to reconstruct a descriptor or a generic signature of some Jandex object.
In this release, Jandex has this functionality built-in, accessible through two interfaces: &lt;code&gt;Descriptor&lt;/code&gt; and &lt;code&gt;GenericSignature&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jandex classes that implement the &lt;code&gt;Descriptor&lt;/code&gt; interface are able to reconstruct their bytecode descriptor.
Similarly, Jandex classes that implement the &lt;code&gt;GenericSignature&lt;/code&gt; interface are able to reconstruct their generic signature and also return whether a generic signature is actually required.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both descriptor and signature reconstruction can optionally perform type variable substitution.
That is, if a type variable occurs when reconstructing the descriptor, the corresponding part of the descriptor may instead describe another type returned by a given substitution function (same for signatures).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;other&quot;&gt;Other&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Previously, Jandex used to fail when invalid generic signature occured in the indexed bytecode.
It turns out that ECJ may produce invalid generic signature on pretty basic code (synthetic static method generated for a lambda), so with Jandex 3.1, invalid signatures are simply ignored.
Thanks Hélios Gilles for providing a reproducer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With great help from Francesco Nigro, a lot of performance improvements to the indexing process were made.
On large JARs, we&amp;#8217;ve seen roughly 20% improvements in indexing speed and 50% improvements in allocation rate.
Thank you!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, Brian Demers and Guillaume Nodet provided fixes for build reproducibility.
(Note that this is not an intentionally supported feature and it&amp;#8217;s only maintained on a best effort basis.)
Thanks!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release brings a lot of changes, but none of them break backward compatibility.
The persistent format of Jandex has not changed either, so upgrade should be safe for everyone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any troubles, or if you have any ideas for Jandex improvements, please &lt;a href=&quot;https://github.com/smallrye/jandex/issues&quot;&gt;file an issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Ladislav Thon</name><email>ladicek@gmail.com</email></author><category term="announcement" /></entry></feed>